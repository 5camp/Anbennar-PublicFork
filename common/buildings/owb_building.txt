# Do not change tags in here without changing every other reference to them.
# If adding new buildings, make sure they are uniquely named.

# cost = x #==> cost in $ to build (subject to other modifiers)
# time = x #==> number of months to build.
# modifier = m # a modifier on the province that the building gives
# trigger = t # an and trigger that needs to be fullfilled to build and keep the building
# one_per_country = yes/no # if yes, only one of these can exist in a country
# manufactory = { trade_good trade_good } # list of trade goods that get a production bonus
# onmap = yes/no # show as a sprite on the map

# FROM = owner
# ROOT = province

# Building AI is now mainly hard-coded. The AI will estimate how much it gains yearly from each building,
# convert the value to ducats, and take the building with biggest yearly return as a percentage of the build cost.
# If lower than 1%, the AI will not consider the yearly return worth it.
# It will also require higher yearly return if the economy in not in prime shape.
# Forts' value also get converted to a yearly return based on terrain and strategic position, as well as available budget for fort maintenance.

# AI can still be modded though; it will multiply the yearly return with the value of ai_will_do.
# If you don't want the AI to build a building at all, make ai_will_do become 0.
# AI will consider each building to be worth 0.01 ducats per year as a base, so making ai_will_do above cost will have them build it at some point.
# It will still check whether it can afford a building before doing so though, but may save up to it.


vault_digging = {
	cost = 1
	time = 12
	
	indestructible = yes
	
	build_trigger = {
	}
	
	modifier = {
	}
	
	on_built = {
		hidden_effect = {
			remove_building = vault_digging
			upgrade_vault = yes
			province_event = { id = owb.3 }
		}
    }
	
	on_destroyed = {
	}
	
	ai_will_do = {
		factor = 0
	}
}

vault_wing_upgrade = {
	cost = 1250
	time = 12
	
	indestructible = yes
	
	build_trigger = {
	}
	
	modifier = {
	}
	
	on_built = {
		hidden_effect = {
			remove_building = vault_wing_upgrade
			trigger_switch = {
				on_trigger = has_province_flag
				
				owb_clone = {
					if = {
						limit = { has_province_modifier = owb_wing_cloning_vat_1 }
						remove_province_modifier = owb_wing_cloning_vat_1
						add_permanent_province_modifier = {
							name = owb_wing_cloning_vat_2
							duration = -1
						}
					}
					else_if = {
						limit = { has_province_modifier = owb_wing_cloning_vat_2 }
						remove_province_modifier = owb_wing_cloning_vat_2
						add_permanent_province_modifier = {
							name = owb_wing_cloning_vat_3
							duration = -1
						}
					}
					else = {
						add_permanent_province_modifier = {
							name = owb_wing_cloning_vat_1
							duration = -1
						}
					}
					change_variable = { owb_clone = 1 }
					clr_province_flag = owb_clone
				}
				owb_replicator = {
					if = {
						limit = { has_province_modifier = owb_ore_replicator_1 }
						remove_province_modifier = owb_ore_replicator_1
						add_permanent_province_modifier = {
							name = owb_ore_replicator_2
							duration = -1
						}
					}
					else_if = {
						limit = { has_province_modifier = owb_ore_replicator_2 }
						remove_province_modifier = owb_ore_replicator_2
						add_permanent_province_modifier = {
							name = owb_ore_replicator_3
							duration = -1
						}
					}
					else = {
						add_permanent_province_modifier = {
							name = owb_ore_replicator_1
							duration = -1
						}
					}
					change_variable = { owb_replicator = 1 }
					clr_province_flag = owb_replicator
				}
				owb_sensor = {
					if = {
						limit = { has_province_modifier = owb_magical_array_sensor_1 }
						remove_province_modifier = owb_magical_array_sensor_1
						add_permanent_province_modifier = {
							name = owb_magical_array_sensor_2
							duration = -1
						}
					}
					else_if = {
						limit = { has_province_modifier = owb_magical_array_sensor_2 }
						remove_province_modifier = owb_magical_array_sensor_2
						add_permanent_province_modifier = {
							name = owb_magical_array_sensor_3
							duration = -1
						}
					}
					else = {
						add_permanent_province_modifier = {
							name = owb_magical_array_sensor_1
							duration = -1
						}
					}
					change_variable = { owb_sensor = 1 }
					clr_province_flag = owb_sensor
				}
				owb_intelligence = {
					if = {
						limit = { has_province_modifier = owb_magical_intelligence_1 }
						remove_province_modifier = owb_magical_intelligence_1
						add_permanent_province_modifier = {
							name = owb_magical_intelligence_2
							duration = -1
						}
					}
					else_if = {
						limit = { has_province_modifier = owb_magical_intelligence_2 }
						remove_province_modifier = owb_magical_intelligence_2
						add_permanent_province_modifier = {
							name = owb_magical_intelligence_3
							duration = -1
						}
					}
					else = {
						add_permanent_province_modifier = {
							name = owb_magical_intelligence_1
							duration = -1
						}
					}
					change_variable = { owb_intelligence = 1 }
					clr_province_flag = owb_intelligence
				}
				owb_protector = {
					if = {
						limit = { has_province_modifier = owb_protector_array_1 }
						remove_province_modifier = owb_protector_array_1
						add_permanent_province_modifier = {
							name = owb_protector_array_2
							duration = -1
						}
					}
					else_if = {
						limit = { has_province_modifier = owb_protector_array_2 }
						remove_province_modifier = owb_protector_array_2
						add_permanent_province_modifier = {
							name = owb_protector_array_3
							duration = -1
						}
					}
					else = {
						add_permanent_province_modifier = {
							name = owb_protector_array_1
							duration = -1
						}
					}
					change_variable = { owb_protector = 1 }
					clr_province_flag = owb_protector
				}
			}
			province_event = { id = owb.6 }
		}
    }
	
	on_destroyed = {
	}
	
	ai_will_do = {
		factor = 0
	}
}
