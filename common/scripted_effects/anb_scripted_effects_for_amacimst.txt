
###	The jousting effect needs both of the Jousting Participants to have the event target event_target:ynn_joust_opponent_1 and event_target:ynn_joust_opponent_2 set, and a flag
###	denoting what events should be fired on victory
###

ynn_joust_effect = {
	
	custom_tooltip = ynn_joust_tt

	hidden_effect = {
		
		# Setting the Jousting Power

		event_target:ynn_joust_opponent_1 = {
			ynn_joust_power_effect = yes
		}
		event_target:ynn_joust_opponent_2 = {
			ynn_joust_power_effect = yes
		}

		# Fire the joust

		event_target:ynn_joust_opponent_1 = {
			ynn_joust_resolve_effect = yes
		}
	}
}


ynn_joust_power_effect = {
	hidden_effect = {
		set_variable = {
			which = participantJoustPower
			value = 0
		}
		
		###	participant Joust Power	###
		
		trigger_switch = {
			on_trigger = mil
			6 = { 
				THIS = {
					change_variable = {
						which = participantJoustPower
						value = 10
					}
				}
			}
			5 = { 
				THIS = {
					change_variable = {
						which = participantJoustPower
						value = 8
					}
				}
			}
			4 = { 
				THIS = {
					change_variable = {
						which = participantJoustPower
						value = 6
					}
				}
			}
			3 = { 
			}
			2 = { 
				THIS = {
					subtract_variable = {
						which = participantJoustPower
						value = 2
					}
				}
			}
			1 = { 
				THIS = {
					subtract_variable = {
						which = participantJoustPower
						value = 3
					}
				}
			}
			0 = { 
				THIS = {
					subtract_variable = {
						which = participantJoustPower
						value = 4
					}
				}
			}
		}
		trigger_switch = {
			on_trigger = ruler_age
			60 = {
				THIS = {
					subtract_variable = {
						which = participantJoustPower
						value = 3
					}
				}
			}
			50 = {
				THIS = {
					subtract_variable = {
						which = participantJoustPower
						value = 2
					}
				}
			}
			40 = {
				THIS = {
					subtract_variable = {
						which = participantJoustPower
						value = 1
					}
				}
			}
		}
		if = {
			limit = { 
				ruler_has_personality = bold_fighter_personality 
			}
			THIS = {
				change_variable = {
					which = participantJoustPower
					value = 4
				}
			}
		}
		if = {
			limit = { 
				ruler_has_personality = strict_personality 
			}
			THIS = {
				change_variable = {
					which = participantJoustPower
					value = 4
				}
			}
		}
		if = {
			limit = { 
				ruler_has_personality = martial_educator_personality 
			}
			THIS = {
				change_variable = {
					which = participantJoustPower
					value = 4
				}
			}
		}
		if = {
			limit = { 
				ruler_has_personality = tactical_genius_personality 
			}
			THIS = {
				change_variable = {
					which = participantJoustPower
					value = 4
				}
			}
		}
		if = {
			limit = { 
				ruler_has_mage_personality = yes
			}
			THIS = {
				change_variable = {
					which = participantJoustPower
					value = 5
				}
			}
		}
		if = {
			limit = { 
				ruler_has_personality = great_conqueror_personality 
			}
			THIS = {
				change_variable = {
					which = participantJoustPower
					value = 7
				}
			}
		}
		if = {
			limit = { 
				ruler_has_personality = mythical_conqueror_personality 
			}
			THIS = {
				change_variable = {
					which = participantJoustPower
					value = 10
				}
			}
		}
		if = {
			limit = { 
				ruler_has_personality = conqueror_personality 
			}
			THIS = {
				change_variable = {
					which = participantJoustPower
					value = 4
				}
			}
		}
		if = {
			limit = { 
				ruler_has_personality = craven_personality 
			}
			THIS = {
				subtract_variable = {
					which = participantJoustPower
					value = 4
				}
			}
		}
		if = {
			limit = { 
				OR = {
					tag = G35
					was_tag = G35
				}
			}
			if = {
				limit = {
					OR = {	#Scaled on the battle modifiers each lance gives
						has_country_modifier = G35_lance_1_1
						has_country_modifier = G35_lance_1_3
					}
				}
				THIS = {
					change_variable = {
						which = offenderJoustPower
						value = 1
					}
				}
			}
			else_if = {
				limit = {
					OR = {
						has_country_modifier = G35_lance_2_1
						has_country_modifier = G35_lance_2_3
						has_country_modifier = G35_lance_1_2
					}
				}
				THIS = {
					change_variable = {
						which = offenderJoustPower
						value = 2
					}
				}
			}
			else_if = {
				limit = {
					OR = {
						has_country_modifier = G35_lance_3_1
						has_country_modifier = G35_lance_3_3
						has_country_modifier = G35_lance_2_2
						has_country_modifier = G35_lance_3_2
					}
				}
				THIS = {
					change_variable = {
						which = offenderJoustPower
						value = 3
					}
				}
			}
			else_if = {
				limit = {
					OR = {
						has_country_modifier = G35_lance_4_1
						has_country_modifier = G35_lance_4_3
					}
				}
				THIS = {
					change_variable = {
						which = offenderJoustPower
						value = 4
					}
				}
			}
			else_if = {
				limit = {
					has_country_modifier = G35_lance_4_2
				}
				THIS = {
					change_variable = {
						which = offenderJoustPower
						value = 5
					}
				}
			}
		}
		log = "Current Participant Joust Power is [This.participantJoustPower.GetValue]"
	}
}

ynn_joust_resolve_effect = {

	#	event_target:ynn_joust_opponent_1 and event_target:ynn_joust_opponent_2 must be assigned to the two joust participants,
	#	they must both have their participantJoustPower set from the ynn_joust_power_effect
	#
	#
	#
	#

	hidden_effect = {
		event_target:ynn_joust_opponent_2 = {
			set_variable = {
				which = participant2JoustPower
				value = 0
			}
			change_variable = {
				which = participant2JoustPower
				which = participantJoustPower
			}
		}

		event_target:ynn_joust_opponent_1 = {
			set_variable = {
				which = participant2JoustPower
				value = 0
			}
			change_variable = {
				which = participant2JoustPower
				which = event_target:ynn_joust_opponent_2
			}
			subtract_variable = {
				which = participantJoustPower
				which = participant2JoustPower
			}
			log = "Current Participant Joust Power is [This.participantJoustPower.GetValue]"
			hidden_effect = {
				if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = 10
						}
					}
					save_event_target_as = ynn_joust_winner
					event_target:ynn_joust_opponent_2 = {
						random = {
							chance = 50
							set_ruler_flag = brutally_unhorsed
						}
						save_event_target_as = ynn_joust_loser
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = 9
						}
					}
					random_list = {
						95 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								random = {
									chance = 30
									set_ruler_flag = brutally_unhorsed
								}
								save_event_target_as = ynn_joust_loser
							}
						}
						05 = {
							save_event_target_as = ynn_joust_loser
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = 8
						}
					}
					random_list = {
						90 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								random = {
									chance = 30
									set_ruler_flag = brutally_unhorsed
								}
								save_event_target_as = ynn_joust_loser
							}
						}
						10 = {
							save_event_target_as = ynn_joust_loser
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = 7
						}
					}
					random_list = {
						85 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								random = {
									chance = 25
									set_ruler_flag = brutally_unhorsed
								}
								save_event_target_as = ynn_joust_loser
							}
						}
						15 = {
							save_event_target_as = ynn_joust_loser
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = 6
						}
					}
					random_list = {
						80 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								random = {
									chance = 20
									set_ruler_flag = brutally_unhorsed
								}
								save_event_target_as = ynn_joust_loser
							}
						}
						20 = {
							save_event_target_as = ynn_joust_loser
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = 5
						}
					}
					random_list = {
						75 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								random = {
									chance = 15
									set_ruler_flag = brutally_unhorsed
								}
								save_event_target_as = ynn_joust_loser
							}
						}
						25 = {
							save_event_target_as = ynn_joust_loser
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = 4
						}
					}
					random_list = {
						70 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								random = {
									chance = 10
									set_ruler_flag = brutally_unhorsed
								}
								save_event_target_as = ynn_joust_loser
							}
						}
						30 = {
							save_event_target_as = ynn_joust_loser
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = 3
						}
					}
					random_list = {
						65 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								random = {
									chance = 5
									set_ruler_flag = brutally_unhorsed
								}
								save_event_target_as = ynn_joust_loser
							}
						}
						35 = {
							save_event_target_as = ynn_joust_loser
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = 2
						}
					}
					random_list = {
						60 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								random = {
									chance = 5
									set_ruler_flag = brutally_unhorsed
								}
								save_event_target_as = ynn_joust_loser
							}
						}
						40 = {
							save_event_target_as = ynn_joust_loser
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = 1
						}
					}
					random_list = {
						55 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								random = {
									chance = 5
									set_ruler_flag = brutally_unhorsed
								}
								save_event_target_as = ynn_joust_loser
							}
						}
						45 = {
							save_event_target_as = ynn_joust_loser
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = 0
						}
					}
					random_list = {
						50 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								random = {
									chance = 5
									set_ruler_flag = brutally_unhorsed
								}
								save_event_target_as = ynn_joust_loser
							}
						}
						50 = {
							save_event_target_as = ynn_joust_loser
							random = {
								chance = 5
								set_ruler_flag = brutally_unhorsed
							}
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = -1
						}
					}
					random_list = {
						45 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_loser
							}
						}
						55 = {
							save_event_target_as = ynn_joust_loser
							random = {
								chance = 5
								set_ruler_flag = brutally_unhorsed
							}
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = -2
						}
					}
					random_list = {
						40 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_loser
							}
						}
						60 = {
							save_event_target_as = ynn_joust_loser
							random = {
								chance = 5
								set_ruler_flag = brutally_unhorsed
							}
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = -3
						}
					}
					random_list = {
						35 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_loser
							}
						}
						65 = {
							save_event_target_as = ynn_joust_loser
							random = {
								chance = 5
								set_ruler_flag = brutally_unhorsed
							}
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = -4
						}
					}
					random_list = {
						30 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_loser
							}
						}
						70 = {
							save_event_target_as = ynn_joust_loser
							random = {
								chance = 10
								set_ruler_flag = brutally_unhorsed
							}
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = -5
						}
					}
					random_list = {
						25 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_loser
							}
						}
						75 = {
							save_event_target_as = ynn_joust_loser
							random = {
								chance = 15
								set_ruler_flag = brutally_unhorsed
							}
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = -6
						}
					}
					random_list = {
						20 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_loser
							}
						}
						80 = {
							save_event_target_as = ynn_joust_loser
							random = {
								chance = 20
								set_ruler_flag = brutally_unhorsed
							}
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = -7
						}
					}
					random_list = {
						15 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_loser
							}
						}
						85 = {
							save_event_target_as = ynn_joust_loser
							random = {
								chance = 25
								set_ruler_flag = brutally_unhorsed
							}
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = -8
						}
					}
					random_list = {
						10 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_loser
							}
						}
						90 = {
							save_event_target_as = ynn_joust_loser
							random = {
								chance = 30
								set_ruler_flag = brutally_unhorsed
							}
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = participantJoustPower
							value = -9
						}
					}
					random_list = {
						5 = {
							save_event_target_as = ynn_joust_winner
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_loser
							}
						}
						95 = {
							save_event_target_as = ynn_joust_loser
							random = {
								chance = 30
								set_ruler_flag = brutally_unhorsed
							}
							event_target:ynn_joust_opponent_2 = {
								save_event_target_as = ynn_joust_winner
							}
						}
					}
				}
				else = {
					save_event_target_as = ynn_joust_loser
					random = {
						chance = 30
						set_ruler_flag = brutally_unhorsed
					}
					event_target:ynn_joust_opponent_2 = {
						save_event_target_as = ynn_joust_winner
					}
				}
			}
		}
		event_target:ynn_joust_winner = {
			ynn_joust_win_effect = yes
		}
		event_target:ynn_joust_loser = {
			ynn_joust_lose_effect = yes
		}
	}
}

ynn_joust_win_effect = {
	if = {
		limit = {
			OR = {
				has_ruler_flag = offender_in_honour_joust
				has_ruler_flag = defender_in_honour_joust
			}
		}
		country_event = {
			id = ynn_events.112
			days = 5
		}
	}
	else_if = {
		limit = {
			has_country_flag = G26_partaking_joust
		}
		country_event = {
			id = flavour_amacimst.150
			days = 1
		}
	}
}

ynn_joust_lose_effect = {
	if = {
		limit = {
			OR = {
				has_ruler_flag = offender_in_honour_joust
				has_ruler_flag = defender_in_honour_joust
			}
		}
		country_event = {
			id = ynn_events.113
			days = 5
		}
	}
	else_if = {
		limit = {
			has_country_flag = G26_partaking_joust
		}
		country_event = {
			id = flavour_amacimst.151
			days = 1
		}
	}
}

clear_all_non_ruinborn_effect = {
	custom_tooltip = clear_all_non_ruinborn_effect_tt
	hidden_effect = {
		if = {
			limit = {
				any_owned_province = {
					ynn_has_any_non_ruinborn_pop_trigger = yes
				}
			}
			every_owned_province = {
				limit = {
					ynn_has_any_non_ruinborn_pop_trigger = yes
					OR = {
						culture = sarda
						culture = dolindhan
					}
				}
				if = {
					limit = {
						has_any_human_pop_trigger = yes
					}
					remove_all_human_minority_size_effect = yes
					owner = {
						small_decrease_of_human_tolerance_effect = yes
						random_known_country = {
							limit = {
								capital_scope = {
									continent = north_america
								}
								NOT = {
									has_country_flag = G26_dont_come_here
								}
							}
							country_event = {
								id = racial_pop_events_human.10
								days = 14
								random = 31
							}
						}
					}
				}
				if = {
					limit = {
						has_any_dwarven_pop_trigger = yes
					}
					remove_all_dwarf_minority_effect = yes
					owner = {
						small_decrease_of_dwarven_tolerance_effect = yes
						random_known_country = {
							limit = {
								capital_scope = {
									continent = north_america
								}
								NOT = {
									has_country_flag = G26_dont_come_here
								}
							}
							country_event = {
								id = racial_pop_events_dwarven.10
								days = 14
								random = 31
							}
						}
					}
				}
				if = {
					limit = {
						has_any_orcish_pop_trigger = yes 
					}
					remove_all_orc_minority_effect = yes
					owner = {
						small_decrease_of_orcish_tolerance_effect = yes
						random_known_country = {
							limit = {
								capital_scope = {
									continent = north_america
								}
								NOT = {
									has_country_flag = G26_dont_come_here
								}
							}
							country_event = {
								id = racial_pop_events_orcish.10
								days = 14
								random = 31
							}
						}
					}
				}
				if = {
					limit = {
						has_any_half_orcish_pop_trigger = yes
					}
					remove_all_horc_minority_effect = yes
					owner = {
						small_decrease_of_half_orcish_tolerance_effect = yes
						random_known_country = {
							limit = {
								capital_scope = {
									continent = north_america
								}
								NOT = {
									has_country_flag = G26_dont_come_here
								}
							}
							country_event = {
								id = racial_pop_events_half_orcish.10
								days = 14
								random = 31
							}
						}
					}
				}
				if = {
					limit = {
						has_any_elven_pop_trigger = yes
					}
					remove_all_elf_minority_effect = yes
					owner = {
						small_decrease_of_elven_tolerance_effect = yes
						random_known_country = {
							limit = {
								capital_scope = {
									continent = north_america
								}
								NOT = {
									has_country_flag = G26_dont_come_here
								}
							}
							country_event = {
								id = racial_pop_events_elven.10
								days = 14
								random = 31
							}
						}
					}
				}
				if = {
					limit = {
						has_any_half_elven_pop_trigger = yes
					}
					remove_all_half_elf_minority_effect = yes
					owner = {
						small_decrease_of_half_elven_tolerance_effect = yes
						random_known_country = {
							limit = {
								capital_scope = {
									continent = north_america
								}
								NOT = {
									has_country_flag = G26_dont_come_here
								}
							}
							country_event = {
								id = racial_pop_events_half_elven.10
								days = 14
								random = 31
							}
						}
					}
				}
				if = {
					limit = {
						has_any_halfling_pop_trigger = yes
					}
					remove_all_halfling_minority_effect = yes
					owner = {
						small_decrease_of_halfling_tolerance_effect = yes
						random_known_country = {
							limit = {
								capital_scope = {
									continent = north_america
								}
								NOT = {
									has_country_flag = G26_dont_come_here
								}
							}
							country_event = {
								id = racial_pop_events_halfling.10
								days = 14
								random = 31
							}
						}
					}
				}
				if = {
					limit = {
						has_any_gnomish_pop_trigger = yes
					}
					remove_all_gnome_minority_effect = yes
					owner = {
						small_decrease_of_gnomish_tolerance_effect = yes
						random_known_country = {
							limit = {
								capital_scope = {
									continent = north_america
								}
								NOT = {
									has_country_flag = G26_dont_come_here
								}
							}
							country_event = {
								id = racial_pop_events_gnomish.10
								days = 14
								random = 31
							}
						}
					}
				}
				if = {
					limit = {
						has_any_kobold_pop_trigger = yes
					}
					remove_all_kobold_minority_effect = yes
					owner = {
						small_decrease_of_kobold_tolerance_effect = yes
						random_known_country = {
							limit = {
								capital_scope = {
									continent = north_america
								}
								NOT = {
									has_country_flag = G26_dont_come_here
								}
							}
							country_event = {
								id = racial_pop_events_kobold.10
								days = 14
								random = 31
							}
						}
					}
				}
			}
		}
	}
}

remove_all_human_minority_size_effect = {
	hidden_effect = {
		if = {
			limit = {
				has_province_modifier = human_minority_integrated_large
			}
			remove_province_modifier = human_minority_integrated_large
		}
		else_if = {
			limit = {
				has_province_modifier = human_minority_coexisting_large
			}
			remove_province_modifier = human_minority_coexisting_large
		}
		else_if = {
			limit = {
				has_province_modifier = human_minority_oppressed_large
			}
			remove_province_modifier = human_minority_oppressed_large
		}
		else_if = {
			limit = {
				has_province_modifier = human_minority_integrated_small
			}
			remove_province_modifier = human_minority_integrated_small
		}
		else_if = {
			limit = {
				has_province_modifier = human_minority_coexisting_small
			}
			remove_province_modifier = human_minority_coexisting_small
		}
		else_if = {
			limit = {
				has_province_modifier = human_minority_oppressed_small
			}
			remove_province_modifier = human_minority_oppressed_small
		}
	}
}

remove_all_dwarf_minority_effect = {
	hidden_effect = {
		if = {
			limit = {
				has_province_modifier = dwarven_minority_integrated_large
			}
			remove_province_modifier = dwarven_minority_integrated_large
		}
		else_if = {
			limit = {
				has_province_modifier = dwarven_minority_coexisting_large
			}
			remove_province_modifier = dwarven_minority_coexisting_large
		}
		else_if = {
			limit = {
				has_province_modifier = dwarven_minority_oppressed_large
			}
			remove_province_modifier = dwarven_minority_oppressed_large
		}
		else_if = {
			limit = {
				has_province_modifier = dwarven_minority_integrated_small
			}
			remove_province_modifier = dwarven_minority_integrated_small
		}
		else_if = {
			limit = {
				has_province_modifier = dwarven_minority_coexisting_small
			}
			remove_province_modifier = dwarven_minority_coexisting_small
		}
		else_if = {
			limit = {
				has_province_modifier = dwarven_minority_oppressed_small
			}
			remove_province_modifier = dwarven_minority_oppressed_small
		}
	}
}

remove_all_horc_minority_effect = {
	hidden_effect = {
		if = {
			limit = {
				has_province_modifier = half_orcish_minority_integrated_large
			}
			remove_province_modifier = half_orcish_minority_integrated_large
		}
		else_if = {
			limit = {
				has_province_modifier = half_orcish_minority_coexisting_large
			}
			remove_province_modifier = half_orcish_minority_coexisting_large
		}
		else_if = {
			limit = {
				has_province_modifier = half_orcish_minority_oppressed_large
			}
			remove_province_modifier = half_orcish_minority_oppressed_large
		}
		else_if = {
			limit = {
				has_province_modifier = half_orcish_minority_integrated_small
			}
			remove_province_modifier = half_orcish_minority_integrated_small
		}
		else_if = {
			limit = {
				has_province_modifier = half_orcish_minority_coexisting_small
			}
			remove_province_modifier = half_orcish_minority_coexisting_small
		}
		else_if = {
			limit = {
				has_province_modifier = half_orcish_minority_oppressed_small
			}
			remove_province_modifier = half_orcish_minority_oppressed_small
		}
	}
}

remove_all_orc_minority_effect = {
	hidden_effect = {
		if = {
			limit = {
				has_province_modifier = orcish_minority_integrated_large
			}
			remove_province_modifier = orcish_minority_integrated_large
		}
		else_if = {
			limit = {
				has_province_modifier = orcish_minority_coexisting_large
			}
			remove_province_modifier = orcish_minority_coexisting_large
		}
		else_if = {
			limit = {
				has_province_modifier = orcish_minority_oppressed_large
			}
			remove_province_modifier = orcish_minority_oppressed_large
		}
		else_if = {
			limit = {
				has_province_modifier = orcish_minority_integrated_small
			}
			remove_province_modifier = orcish_minority_integrated_small
		}
		else_if = {
			limit = {
				has_province_modifier = orcish_minority_coexisting_small
			}
			remove_province_modifier = orcish_minority_coexisting_small
		}
		else_if = {
			limit = {
				has_province_modifier = orcish_minority_oppressed_small
			}
			remove_province_modifier = orcish_minority_oppressed_small
		}
	}
}

remove_all_halfling_minority_effect = {
	hidden_effect = {
		if = {
			limit = {
				has_province_modifier = halfling_minority_integrated_large
			}
			remove_province_modifier = halfling_minority_integrated_large
		}
		else_if = {
			limit = {
				has_province_modifier = halfling_minority_coexisting_large
			}
			remove_province_modifier = halfling_minority_coexisting_large
		}
		else_if = {
			limit = {
				has_province_modifier = halfling_minority_oppressed_large
			}
			remove_province_modifier = halfling_minority_oppressed_large
		}
		else_if = {
			limit = {
				has_province_modifier = halfling_minority_integrated_small
			}
			remove_province_modifier = halfling_minority_integrated_small
		}
		else_if = {
			limit = {
				has_province_modifier = halfling_minority_coexisting_small
			}
			remove_province_modifier = halfling_minority_coexisting_small
		}
		else_if = {
			limit = {
				has_province_modifier = halfling_minority_oppressed_small
			}
			remove_province_modifier = halfling_minority_oppressed_small
		}
	}
}

remove_all_elf_minority_effect = {
	hidden_effect = {
		if = {
			limit = {
				has_province_modifier = elven_minority_integrated_large
			}
			remove_province_modifier = elven_minority_integrated_large
		}
		else_if = {
			limit = {
				has_province_modifier = elven_minority_coexisting_large
			}
			remove_province_modifier = elven_minority_coexisting_large
		}
		else_if = {
			limit = {
				has_province_modifier = elven_minority_oppressed_large
			}
			remove_province_modifier = elven_minority_oppressed_large
		}
		else_if = {
			limit = {
				has_province_modifier = elven_minority_integrated_small
			}
			remove_province_modifier = elven_minority_integrated_small
		}
		else_if = {
			limit = {
				has_province_modifier = elven_minority_coexisting_small
			}
			remove_province_modifier = elven_minority_coexisting_small
		}
		else_if = {
			limit = {
				has_province_modifier = elven_minority_oppressed_small
			}
			remove_province_modifier = elven_minority_oppressed_small
		}
	}
}

remove_all_half_elf_minority_effect = {
	hidden_effect = {
		if = {
			limit = {
				has_province_modifier = half_elven_minority_integrated_large
			}
			remove_province_modifier = half_elven_minority_integrated_large
		}
		else_if = {
			limit = {
				has_province_modifier = half_elven_minority_coexisting_large
			}
			remove_province_modifier = half_elven_minority_coexisting_large
		}
		else_if = {
			limit = {
				has_province_modifier = half_elven_minority_oppressed_large
			}
			remove_province_modifier = half_elven_minority_oppressed_large
		}
		else_if = {
			limit = {
				has_province_modifier = half_elven_minority_integrated_small
			}
			remove_province_modifier = half_elven_minority_integrated_small
		}
		else_if = {
			limit = {
				has_province_modifier = half_elven_minority_coexisting_small
			}
			remove_province_modifier = half_elven_minority_coexisting_small
		}
		else_if = {
			limit = {
				has_province_modifier = half_elven_minority_oppressed_small
			}
			remove_province_modifier = half_elven_minority_oppressed_small
		}
	}
}

remove_all_gnome_minority_effect = {
	hidden_effect = {
		if = {
			limit = {
				has_province_modifier = gnomish_minority_integrated_large
			}
			remove_province_modifier = gnomish_minority_integrated_large
		}
		else_if = {
			limit = {
				has_province_modifier = gnomish_minority_coexisting_large
			}
			remove_province_modifier = gnomish_minority_coexisting_large
		}
		else_if = {
			limit = {
				has_province_modifier = gnomish_minority_oppressed_large
			}
			remove_province_modifier = gnomish_minority_oppressed_large
		}
		else_if = {
			limit = {
				has_province_modifier = gnomish_minority_integrated_small
			}
			remove_province_modifier = gnomish_minority_integrated_small
		}
		else_if = {
			limit = {
				has_province_modifier = gnomish_minority_coexisting_small
			}
			remove_province_modifier = gnomish_minority_coexisting_small
		}
		else_if = {
			limit = {
				has_province_modifier = gnomish_minority_oppressed_small
			}
			remove_province_modifier = gnomish_minority_oppressed_small
		}
	}
}

remove_all_kobold_minority_effect = {
	hidden_effect = {
		if = {
			limit = {
				has_province_modifier = kobold_minority_integrated_large
			}
			remove_province_modifier = kobold_minority_integrated_large
		}
		else_if = {
			limit = {
				has_province_modifier = kobold_minority_coexisting_large
			}
			remove_province_modifier = kobold_minority_coexisting_large
		}
		else_if = {
			limit = {
				has_province_modifier = kobold_minority_oppressed_large
			}
			remove_province_modifier = kobold_minority_oppressed_large
		}
		else_if = {
			limit = {
				has_province_modifier = kobold_minority_integrated_small
			}
			remove_province_modifier = kobold_minority_integrated_small
		}
		else_if = {
			limit = {
				has_province_modifier = kobold_minority_coexisting_small
			}
			remove_province_modifier = kobold_minority_coexisting_small
		}
		else_if = {
			limit = {
				has_province_modifier = kobold_minority_oppressed_small
			}
			remove_province_modifier = kobold_minority_oppressed_small
		}
	}
}