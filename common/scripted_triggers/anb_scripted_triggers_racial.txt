monstrous_government = {

}

culture_is_kobold = {
	culture_group = kobold
}

monstrous_culture = {
	OR = {
		culture_group = kobold
		culture_group = orcish
		culture_group = gnollish
		culture_group = goblin
		culture_group = harpy
		culture_group = giantkind
	}
}


culture_group_is_short_lived = {
	OR = {
		culture_group = anbennarian
		culture_group = alenic
		culture_group = businori
		culture_group = escanni
		culture_group = dostanorian
		culture_group = divenori
		culture_group = lencori
		culture_group = halfling
		culture_group = gerudian
		culture_group = gnollish
		culture_group = orcish
		culture_group = goblin
		culture_group = bulwari
	}
}

culture_group_is_human = {
	OR = {
		culture_group = anbennarian
		culture_group = alenic
		culture_group = businori
		culture_group = escanni
		culture_group = dostanorian
		culture_group = divenori
		culture_group = lencori
		culture_group = bulwari
		culture_group = gerudian
		#whatever new aelantiri is
	}
	NOT = {
		culture_is_half_orcish = yes
	}
	NOT = {
		culture_is_half_elven = yes
	}
}

culture_group_is_ruinborn = {
	OR = {
		culture_group = kheionai_ruinborn_elf
		culture_group = eltibhari_ruinborn_elf
		culture_group = devandi_ruinborn_elf
		culture_group = north_ruinborn_elf
		culture_group = eordellon_ruinborn_elf
		culture_group = south_ruinborn_elf
		culture_group = harafe_ruinborn_elf
		culture_group = effelai_ruinborn_elf
		culture_group = veykodan_ruinborn_elf
		culture_group = ynnic_ruinborn_elf
		culture_group = taychendi_ruinborn_elf
		culture_group = amadian_ruinborn_elf
		
		culture_group = songwracked_elf
		culture_group = degenerated_elf
		
	}
}

culture_is_troll = {
	OR = {
		primary_culture = fjord_troll
		primary_culture = forest_troll
		
		#For Provinces - provinces work with culture_group or culture, so primary_culture for province isnt a thing!
		culture = fjord_troll	
		culture = forest_troll
	}
}

culture_is_half_elven = {
	OR = {
		primary_culture = half_elf
		#this should contain half elves of other culture groups?
		
		culture = half_elf
	}
}

culture_is_half_orcish = {
	OR = {
		primary_culture = half_orc
		#this should contain half elves of other culture groups?
		
		culture = half_orc
	}
}

has_human_accepted_culture = {
	OR = {
		accepted_culture = anbenncoster
		accepted_culture = west_damerian
		accepted_culture = east_damerian
		accepted_culture = pearlsedger
		accepted_culture = crownsman
		accepted_culture = vernman
		accepted_culture = exwesser
		accepted_culture = arbarani
		accepted_culture = esmari
		accepted_culture = arannese
		accepted_culture = nathalairey
		accepted_culture = uelairey
		accepted_culture = aldresian
		
		accepted_culture = gawedi
		accepted_culture = old_alenic
		accepted_culture = blue_reachman
		accepted_culture = vertesker
		accepted_culture = moorman
		accepted_culture = wexonard
		accepted_culture = marrodic
		
		accepted_culture = busilari
		accepted_culture = tefori
		accepted_culture = crathanori
		
		accepted_culture = black_castanorian
		accepted_culture = castanorian
		accepted_culture = castellyrian
		accepted_culture = marcher
		accepted_culture = adenner
		accepted_culture = white_reachman
		
		accepted_culture = luciander
		accepted_culture = ancardian
		accepted_culture = rogieran
		accepted_culture = elikhander
		accepted_culture = heartman
		accepted_culture = alenori
		accepted_culture = stalboric
		accepted_culture = ravenmarcher
		accepted_culture = ionnic
		accepted_culture = estairey
		accepted_culture = anbenlander
		accepted_culture = nurcestiran
		accepted_culture = esthili
		accepted_culture = rosanda
		accepted_culture = covenbladic
		accepted_culture = corintari
		
		accepted_culture = corvurian
		accepted_culture = ourdi
		accepted_culture = cardesti
		
		accepted_culture = kheteratan
		accepted_culture = desha
		accepted_culture = far_akani
		
		accepted_culture = high_lorentish
		accepted_culture = low_lorentish
		accepted_culture = derannic
		accepted_culture = sorncosti
		accepted_culture = roilsardi
		accepted_culture = iochander
		
		accepted_culture = reverian
		accepted_culture = west_dalr
		accepted_culture = east_dalr
		accepted_culture = olavish
		
		accepted_culture = bahari
		accepted_culture = gelkar
		accepted_culture = brasanni
		accepted_culture = zanite
		
		# Break in case of emergency!
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
		# accepted_culture = nurcestiran
	}
}

has_elven_accepted_culture = {
	OR = {
		accepted_culture = moon_elf
		accepted_culture = sun_elf
		accepted_culture = wood_elf
		accepted_culture = sea_elf
	}
}

has_dwarven_accepted_culture = {
	OR = {
		accepted_culture = ruby_dwarf
		accepted_culture = silver_dwarf
		accepted_culture = gold_dwarf
		accepted_culture = copper_dwarf
	}
}

has_halfling_accepted_culture = {
	OR = {
		accepted_culture = imperial_halfling
		accepted_culture = bluefoot_halfling
		accepted_culture = redfoot_halfling
		accepted_culture = newfoot_halfling
		accepted_culture = visfoot_halfling
	}
}

has_gnomish_accepted_culture = {
	OR = {
		accepted_culture = cliff_gnome
		accepted_culture = creek_gnome
		accepted_culture = imperial_gnome
	}
}

has_half_elven_accepted_culture = {
	OR = {
		accepted_culture = half_elf
	}
}

has_half_orcish_accepted_culture = {
	OR = {
		accepted_culture = half_orc
	}
}

has_orcish_accepted_culture = {
	OR = {
		accepted_culture = green_orc
		accepted_culture = gray_orc
	}
}

has_kobold_accepted_culture = {
	OR = {
		accepted_culture = redscale_kobold
		accepted_culture = bluescale_kobold
		accepted_culture = greenscale_kobold
		accepted_culture = kobildzani_kobold
		#zurzumexia kobold
	}
}

has_troll_accepted_culture = {
	OR = {
		accepted_culture = fjord_troll
		accepted_culture = forest_troll
	}
}

has_harpy_accepted_culture = {
	OR = {
		accepted_culture = firanyan_harpy
	}
}

has_ruinborn_accepted_culture = {
	OR = {
		accepted_culture = degabhen
		accepted_culture = oktibhen
		accepted_culture = kherkabhen
		accepted_culture = lokebhen
		accepted_culture = ormabhen
		accepted_culture = arpebhen
		accepted_culture = ambhen
		accepted_culture = kimabhen
		
		accepted_culture = eltibhar
		
		accepted_culture = mteibhar
		accepted_culture = basobhar
		accepted_culture = chendhyan
		
		accepted_culture = qoerhi
		accepted_culture = boek
		accepted_culture = kwineh
		accepted_culture = cheshoshi
		accepted_culture = teira
		
		accepted_culture = selphereg
		accepted_culture = caamas
		accepted_culture = peitar
		accepted_culture = tuathak
		accepted_culture = snecboth
		accepted_culture = fograc
		
		accepted_culture = isca
		accepted_culture = soruinic
		accepted_culture = takeni
		accepted_culture = sinama
		
		accepted_culture = harafe
		accepted_culture = kooras
		accepted_culture = mayte
		accepted_culture = epednar
		
		accepted_culture = effe
		accepted_culture = laii
		accepted_culture = parura
		accepted_culture = thamvoii
		accepted_culture = oronoii
		
		#Degenerated
		accepted_culture = muhiii
		accepted_culture = leechmen
		accepted_culture = mushmen
		accepted_culture = bloodfeeders
		accepted_culture = silent_watchers
		accepted_culture = cursed_ones
		accepted_culture = ice_sleepers
		
		accepted_culture = doos
		accepted_culture = doosun
		
		accepted_culture = larankarha
		accepted_culture = yodhanpir
		accepted_culture = kalavendhi
		accepted_culture = thekvrystana
		accepted_culture = chendyan
		
		accepted_culture = rzentur
		accepted_culture = old_rzentur
		accepted_culture = dolindhan
		accepted_culture = sarda
		
		accepted_culture = veykodan
		
	}
}

has_goblin_accepted_culture = {
	OR = {
		accepted_culture = forest_goblin
		accepted_culture = common_goblin
		accepted_culture = hill_goblin
		accepted_culture = cave_goblin
		accepted_culture = exodus_goblin
		accepted_culture = city_goblin
	}
}

has_gnollish_accepted_culture = {
	OR = {
		accepted_culture = sandfang_gnoll
		accepted_culture = hill_gnoll
		accepted_culture = flamemarked_gnoll
	}
}


has_no_majority_trigger = {
	has_dwarven_majority_trigger = no
	has_elven_majority_trigger = no
	has_halfling_majority_trigger = no
	has_gnomish_majority_trigger = no
	has_half_orcish_majority_trigger = no
	has_kobold_majority_trigger = no
	has_orcish_majority_trigger = no
	has_human_majority_trigger = no
	has_gnollish_majority_trigger = no
	has_ruinborn_majority_trigger = no
	has_goblin_majority_trigger = no
	has_harpy_majority_trigger = no
	has_troll_majority_trigger = no
	has_half_elven_majority_trigger = no
}

has_no_minority_trigger = {
	has_dwarven_minority_trigger = no
	has_elven_minority_trigger = no
	has_halfling_minority_trigger = no
	has_gnomish_minority_trigger = no
	has_half_orcish_minority_trigger = no
	has_kobold_minority_trigger = no
	has_orcish_minority_trigger = no
	has_human_minority_trigger = no
	has_gnollish_minority_trigger = no
	has_ruinborn_minority_trigger = no
	has_goblin_minority_trigger = no
	has_harpy_minority_trigger = no
	has_troll_minority_trigger = no
	has_half_elven_minority_trigger = no
}

has_minority_trigger = {
	OR = {
		has_dwarven_minority_trigger = yes
		has_elven_minority_trigger = yes
		has_halfling_minority_trigger = yes
		has_gnomish_minority_trigger = yes
		has_half_orcish_minority_trigger = yes
		has_kobold_minority_trigger = yes
		has_orcish_minority_trigger = yes
		has_human_minority_trigger = yes
		has_gnollish_minority_trigger = yes
		has_ruinborn_minority_trigger = yes
		has_goblin_minority_trigger = yes
		has_harpy_minority_trigger = yes
		has_troll_minority_trigger = yes
		has_half_elven_minority_trigger = yes
	}
}

has_low_tolerance_minority_trigger = {
	OR = {
		low_tolerance_dwarven_race_trigger = yes
		low_tolerance_elven_race_trigger = yes
		low_tolerance_halfling_race_trigger = yes
		low_tolerance_gnomish_race_trigger = yes
		low_tolerance_half_orcish_race_trigger = yes
		low_tolerance_kobold_race_trigger = yes
		low_tolerance_orcish_race_trigger = yes
		low_tolerance_human_race_trigger = yes
		low_tolerance_gnollish_race_trigger = yes
		low_tolerance_ruinborn_race_trigger = yes
		low_tolerance_goblin_race_trigger = yes
		low_tolerance_harpy_race_trigger = yes
		low_tolerance_troll_race_trigger = yes
		low_tolerance_half_elven_race_trigger = yes
	}
}

# ELVEN -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_elven_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_elven_minority_tooltip
		OR = {
			has_province_modifier = elven_minority_oppressed_small
			has_province_modifier = elven_minority_coexisting_small
			has_province_modifier = elven_minority_integrated_small
			has_province_modifier = elven_minority_oppressed_large
			has_province_modifier = elven_minority_coexisting_large
			has_province_modifier = elven_minority_integrated_large
		}
	}
}
has_elven_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_elven_majority_tooltip
		OR = {
			has_province_modifier = elven_majority_oppressed
			has_province_modifier = elven_majority_coexisting
			has_province_modifier = elven_majority_integrated
		}
	}
}
has_small_elven_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_elven_minority_tooltip
		OR = {
			has_province_modifier = elven_minority_oppressed_small
			has_province_modifier = elven_minority_coexisting_small
			has_province_modifier = elven_minority_integrated_small
		}
	}
}
has_large_elven_minority_trigger = {	# Only checks for large minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_elven_minority_tooltip
		OR = {
			has_province_modifier = elven_minority_oppressed_large
			has_province_modifier = elven_minority_coexisting_large
			has_province_modifier = elven_minority_integrated_large
		}
	}
}
has_oppressed_elven_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_elven_minority_tooltip
		OR = {
			has_province_modifier = elven_minority_oppressed_small
			has_province_modifier = elven_minority_oppressed_large
		}
	}
}
has_oppressed_elven_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_elven_pop_tooltip
		OR = {
			has_province_modifier = elven_minority_oppressed_small
			has_province_modifier = elven_minority_oppressed_large
			has_province_modifier = elven_majority_oppressed
		}
	}
}
has_integrated_elven_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_elven_minority_tooltip
		OR = {
			has_province_modifier = elven_minority_integrated_small
			has_province_modifier = elven_minority_integrated_large
		}
	}
}
has_integrated_elven_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_elven_pop_tooltip
		OR = {
			has_province_modifier = elven_minority_integrated_small
			has_province_modifier = elven_minority_integrated_large
			has_province_modifier = elven_majority_integrated
		}
	}
}
has_coexisting_elven_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_elven_minority_tooltip
		OR = {
			has_province_modifier = elven_minority_coexisting_small
			has_province_modifier = elven_minority_coexisting_large
		}
	}
}
has_coexisting_elven_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_elven_pop_tooltip
		OR = {
			has_province_modifier = elven_minority_coexisting_small
			has_province_modifier = elven_minority_coexisting_large
			has_province_modifier = elven_majority_coexisting
		}
	}
}
# Country level
max_tolerance_elven_race_trigger = {	# Is elven tolerance = 100
	check_variable = {
		which = elven_race_tolerance
		which = 100
	}
}
high_tolerance_elven_race_trigger = {	# Is Orcish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_elven_people_tooltip
		OR = {
			check_variable = {
				which = elven_race_tolerance
				value = 70
			}
			has_country_modifier = elven_administration
		}
	}
}
medium_tolerance_elven_race_trigger = {	# Is Orcish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_elven_people_tooltip
		NOT = { has_country_modifier = elven_administration }
		check_variable = {
			which = elven_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = elven_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_elven_race_trigger = {	# Is Orcish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_elven_people_tooltip
		NOT = { has_country_modifier = elven_administration }
		NOT = {
			check_variable = {
				which = elven_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_elven_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	custom_trigger_tooltip = {
		tooltip = have_unmatching_elven_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_elven_race_trigger = yes }
				OR = {
					has_coexisting_elven_pop_trigger = yes
					has_oppressed_elven_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_elven_race_trigger = yes }
				OR = {
					has_integrated_elven_pop_trigger = yes
					has_oppressed_elven_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_elven_race_trigger = yes }
				OR = {
					has_integrated_elven_pop_trigger = yes
					has_coexisting_elven_pop_trigger = yes
				}
			}
		}
	}
}
# For Ai Only
ai_lower_than_wanted_tolerance_elven = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = elven_race_tolerance
			which = elven_race_tolerance_ai
		}
	}
}
ai_equal_to_wanted_tolerance_elven = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = elven_race_tolerance_ai
		which = elven_race_tolerance
	}
}
ai_higher_than_wanted_tolerance_elven = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = elven_race_tolerance
		which = elven_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = elven_race_tolerance_ai
			which = elven_race_tolerance
		}
	}
}


# DWARVEN -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_dwarven_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_dwarven_minority_tooltip
		OR = {
			has_province_modifier = dwarven_minority_oppressed_small
			has_province_modifier = dwarven_minority_coexisting_small
			has_province_modifier = dwarven_minority_integrated_small
			has_province_modifier = dwarven_minority_oppressed_large
			has_province_modifier = dwarven_minority_coexisting_large
			has_province_modifier = dwarven_minority_integrated_large
		}
	}
}
has_dwarven_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_dwarven_majority_tooltip
		OR = {
			has_province_modifier = dwarven_majority_oppressed
			has_province_modifier = dwarven_majority_coexisting
			has_province_modifier = dwarven_majority_integrated
		}
	}
}
has_small_dwarven_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_dwarven_minority_tooltip
		OR = {
			has_province_modifier = dwarven_minority_oppressed_small
			has_province_modifier = dwarven_minority_coexisting_small
			has_province_modifier = dwarven_minority_integrated_small
		}
	}
}
has_large_dwarven_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_dwarven_minority_tooltip
		OR = {
			has_province_modifier = dwarven_minority_oppressed_large
			has_province_modifier = dwarven_minority_coexisting_large
			has_province_modifier = dwarven_minority_integrated_large
		}
	}
}
has_oppressed_dwarven_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_dwarven_minority_tooltip
		OR = {
			has_province_modifier = dwarven_minority_oppressed_small
			has_province_modifier = dwarven_minority_oppressed_large
		}
	}
}
has_oppressed_dwarven_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_dwarven_pop_tooltip
		OR = {
			has_province_modifier = dwarven_minority_oppressed_small
			has_province_modifier = dwarven_minority_oppressed_large
			has_province_modifier = dwarven_majority_oppressed
		}
	}
}
has_integrated_dwarven_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_dwarven_minority_tooltip
		OR = {
			has_province_modifier = dwarven_minority_integrated_small
			has_province_modifier = dwarven_minority_integrated_large
		}
	}
}
has_integrated_dwarven_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_dwarven_pop_tooltip
		OR = {
			has_province_modifier = dwarven_minority_integrated_small
			has_province_modifier = dwarven_minority_integrated_large
			has_province_modifier = dwarven_majority_integrated
		}
	}
}
has_coexisting_dwarven_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_dwarven_minority_tooltip
		OR = {
			has_province_modifier = dwarven_minority_coexisting_small
			has_province_modifier = dwarven_minority_coexisting_large
		}
	}
}
has_coexisting_dwarven_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_dwarven_pop_tooltip
		OR = {
			has_province_modifier = dwarven_minority_coexisting_small
			has_province_modifier = dwarven_minority_coexisting_large
			has_province_modifier = dwarven_majority_coexisting
		}
	}
}
# Country level
max_tolerance_dwarven_race_trigger = {	# Is dwarven tolerance = 100
	check_variable = {
		which = dwarven_race_tolerance
		which = 100
	}
}
high_tolerance_dwarven_race_trigger = {	# Is Orcish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_dwarven_people_tooltip
		OR = {
			check_variable = {
				which = dwarven_race_tolerance
				value = 70
			}
			has_country_modifier = dwarven_administration
		}
	}
}
medium_tolerance_dwarven_race_trigger = {	# Is Orcish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_dwarven_people_tooltip
		NOT = { has_country_modifier = dwarven_administration }
		check_variable = {
			which = dwarven_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = dwarven_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_dwarven_race_trigger = {	# Is Orcish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_dwarven_people_tooltip
		NOT = { has_country_modifier = dwarven_administration }
		NOT = {
			check_variable = {
				which = dwarven_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_dwarven_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	custom_trigger_tooltip = {
		tooltip = have_unmatching_dwarven_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_dwarven_race_trigger = yes }
				OR = {
					has_coexisting_dwarven_pop_trigger = yes
					has_oppressed_dwarven_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_dwarven_race_trigger = yes }
				OR = {
					has_integrated_dwarven_pop_trigger = yes
					has_oppressed_dwarven_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_dwarven_race_trigger = yes }
				OR = {
					has_integrated_dwarven_pop_trigger = yes
					has_coexisting_dwarven_pop_trigger = yes
				}
			}
		}
	}
}
# For Ai Only
ai_lower_than_wanted_tolerance_dwarven = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = dwarven_race_tolerance
			which = dwarven_race_tolerance_ai
		}
	}
}
ai_equal_to_wanted_tolerance_dwarven = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = dwarven_race_tolerance_ai
		which = dwarven_race_tolerance
	}
}
ai_higher_than_wanted_tolerance_dwarven = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = dwarven_race_tolerance
		which = dwarven_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = dwarven_race_tolerance_ai
			which = dwarven_race_tolerance
		}
	}
}


# HALFLING -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_halfling_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_halfling_minority_tooltip
		OR = {
			has_province_modifier = halfling_minority_oppressed_small
			has_province_modifier = halfling_minority_coexisting_small
			has_province_modifier = halfling_minority_integrated_small
			has_province_modifier = halfling_minority_oppressed_large
			has_province_modifier = halfling_minority_coexisting_large
			has_province_modifier = halfling_minority_integrated_large
		}
	}
}
has_halfling_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_halfling_majority_tooltip
		OR = {
			has_province_modifier = halfling_majority_oppressed
			has_province_modifier = halfling_majority_coexisting
			has_province_modifier = halfling_majority_integrated
		}
	}
}
has_small_halfling_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_halfling_minority_tooltip
		OR = {
			has_province_modifier = halfling_minority_oppressed_small
			has_province_modifier = halfling_minority_coexisting_small
			has_province_modifier = halfling_minority_integrated_small
		}
	}
}
has_large_halfling_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_halfling_minority_tooltip
		OR = {
			has_province_modifier = halfling_minority_oppressed_large
			has_province_modifier = halfling_minority_coexisting_large
			has_province_modifier = halfling_minority_integrated_large
		}
	}
}
has_oppressed_halfling_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_halfling_minority_tooltip
		OR = {
			has_province_modifier = halfling_minority_oppressed_small
			has_province_modifier = halfling_minority_oppressed_large
		}
	}
}
has_oppressed_halfling_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_halfling_pop_tooltip
		OR = {
			has_province_modifier = halfling_minority_oppressed_small
			has_province_modifier = halfling_minority_oppressed_large
			has_province_modifier = halfling_majority_oppressed
		}
	}
}
has_integrated_halfling_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_halfling_minority_tooltip
		OR = {
			has_province_modifier = halfling_minority_integrated_small
			has_province_modifier = halfling_minority_integrated_large
		}
	}
}
has_integrated_halfling_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_halfling_pop_tooltip
		OR = {
			has_province_modifier = halfling_minority_integrated_small
			has_province_modifier = halfling_minority_integrated_large
			has_province_modifier = halfling_majority_integrated
		}
	}
}
has_coexisting_halfling_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_halfling_minority_tooltip
		OR = {
			has_province_modifier = halfling_minority_coexisting_small
			has_province_modifier = halfling_minority_coexisting_large
		}
	}
}
has_coexisting_halfling_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_halfling_pop_tooltip
		OR = {
			has_province_modifier = halfling_minority_coexisting_small
			has_province_modifier = halfling_minority_coexisting_large
			has_province_modifier = halfling_majority_coexisting
		}
	}
}
# Country level
max_tolerance_halfling_race_trigger = {	# Is halfling tolerance = 100
	check_variable = {
		which = halfling_race_tolerance
		which = 100
	}
}
high_tolerance_halfling_race_trigger = {	# Is Orcish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_halfling_people_tooltip
		OR = {
			check_variable = {
				which = halfling_race_tolerance
				value = 70
			}
			has_country_modifier = halfling_administration
		}
	}
}
medium_tolerance_halfling_race_trigger = {	# Is Orcish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_halfling_people_tooltip
		NOT = { has_country_modifier = halfling_administration }
		check_variable = {
			which = halfling_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = halfling_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_halfling_race_trigger = {	# Is Orcish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_halfling_people_tooltip
		NOT = { has_country_modifier = halfling_administration }
		NOT = {
			check_variable = {
				which = halfling_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_halfling_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	custom_trigger_tooltip = {
		tooltip = have_unmatching_halfling_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_halfling_race_trigger = yes }
				OR = {
					has_coexisting_halfling_pop_trigger = yes
					has_oppressed_halfling_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_halfling_race_trigger = yes }
				OR = {
					has_integrated_halfling_pop_trigger = yes
					has_oppressed_halfling_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_halfling_race_trigger = yes }
				OR = {
					has_integrated_halfling_pop_trigger = yes
					has_coexisting_halfling_pop_trigger = yes
				}
			}
		}
	}
}
# For Ai Only
ai_lower_than_wanted_tolerance_halfling = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = halfling_race_tolerance
			which = halfling_race_tolerance_ai
		}
	}
}
ai_equal_to_wanted_tolerance_halfling = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = halfling_race_tolerance_ai
		which = halfling_race_tolerance
	}
}
ai_higher_than_wanted_tolerance_halfling = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = halfling_race_tolerance
		which = halfling_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = halfling_race_tolerance_ai
			which = halfling_race_tolerance
		}
	}
}


# GNOMISH -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_gnomish_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_gnomish_minority_tooltip
		OR = {
			has_province_modifier = gnomish_minority_oppressed_small
			has_province_modifier = gnomish_minority_coexisting_small
			has_province_modifier = gnomish_minority_integrated_small
			has_province_modifier = gnomish_minority_oppressed_large
			has_province_modifier = gnomish_minority_coexisting_large
			has_province_modifier = gnomish_minority_integrated_large
		}
	}
}
has_gnomish_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_gnomish_majority_tooltip
		OR = {
			has_province_modifier = gnomish_majority_oppressed
			has_province_modifier = gnomish_majority_coexisting
			has_province_modifier = gnomish_majority_integrated
		}
	}
}
has_small_gnomish_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_gnomish_minority_tooltip
		OR = {
			has_province_modifier = gnomish_minority_oppressed_small
			has_province_modifier = gnomish_minority_coexisting_small
			has_province_modifier = gnomish_minority_integrated_small
		}
	}
}
has_large_gnomish_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_gnomish_minority_tooltip
		OR = {
			has_province_modifier = gnomish_minority_oppressed_large
			has_province_modifier = gnomish_minority_coexisting_large
			has_province_modifier = gnomish_minority_integrated_large
		}
	}
}
has_oppressed_gnomish_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_gnomish_minority_tooltip
		OR = {
			has_province_modifier = gnomish_minority_oppressed_small
			has_province_modifier = gnomish_minority_oppressed_large
		}
	}
}
has_oppressed_gnomish_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_gnomish_pop_tooltip
		OR = {
			has_province_modifier = gnomish_minority_oppressed_small
			has_province_modifier = gnomish_minority_oppressed_large
			has_province_modifier = gnomish_majority_oppressed
		}
	}
}
has_integrated_gnomish_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_gnomish_minority_tooltip
		OR = {
			has_province_modifier = gnomish_minority_integrated_small
			has_province_modifier = gnomish_minority_integrated_large
		}
	}
}
has_integrated_gnomish_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_gnomish_pop_tooltip
		OR = {
			has_province_modifier = gnomish_minority_integrated_small
			has_province_modifier = gnomish_minority_integrated_large
			has_province_modifier = gnomish_majority_integrated
		}
	}
}
has_coexisting_gnomish_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_gnomish_minority_tooltip
		OR = {
			has_province_modifier = gnomish_minority_coexisting_small
			has_province_modifier = gnomish_minority_coexisting_large
		}
	}
}
has_coexisting_gnomish_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_gnomish_pop_tooltip
		OR = {
			has_province_modifier = gnomish_minority_coexisting_small
			has_province_modifier = gnomish_minority_coexisting_large
			has_province_modifier = gnomish_majority_coexisting
		}
	}
}
# Country level
max_tolerance_gnomish_race_trigger = {	# Is gnomish tolerance = 100
	check_variable = {
		which = gnomish_race_tolerance
		which = 100
	}
}
high_tolerance_gnomish_race_trigger = {	# Is Orcish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_gnomish_people_tooltip
		OR = {
			check_variable = {
				which = gnomish_race_tolerance
				value = 70
			}
			has_country_modifier = gnomish_administration
		}
	}
}
medium_tolerance_gnomish_race_trigger = {	# Is Orcish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_gnomish_people_tooltip
		NOT = { has_country_modifier = gnomish_administration }
		check_variable = {
			which = gnomish_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = gnomish_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_gnomish_race_trigger = {	# Is Orcish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_gnomish_people_tooltip
		NOT = { has_country_modifier = gnomish_administration }
		NOT = {
			check_variable = {
				which = gnomish_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_gnomish_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	custom_trigger_tooltip = {
		tooltip = have_unmatching_gnomish_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_gnomish_race_trigger = yes }
				OR = {
					has_coexisting_gnomish_pop_trigger = yes
					has_oppressed_gnomish_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_gnomish_race_trigger = yes }
				OR = {
					has_integrated_gnomish_pop_trigger = yes
					has_oppressed_gnomish_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_gnomish_race_trigger = yes }
				OR = {
					has_integrated_gnomish_pop_trigger = yes
					has_coexisting_gnomish_pop_trigger = yes
				}
			}
		}
	}
}
# For Ai Only
ai_lower_than_wanted_tolerance_gnomish = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = gnomish_race_tolerance
			which = gnomish_race_tolerance_ai
		}
	}
}
ai_equal_to_wanted_tolerance_gnomish = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = gnomish_race_tolerance_ai
		which = gnomish_race_tolerance
	}
}
ai_higher_than_wanted_tolerance_gnomish = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = gnomish_race_tolerance
		which = gnomish_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = gnomish_race_tolerance_ai
			which = gnomish_race_tolerance
		}
	}
}


# HALF ORCISH -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_half_orcish_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_half_orcish_minority_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_oppressed_small
			has_province_modifier = half_orcish_minority_coexisting_small
			has_province_modifier = half_orcish_minority_integrated_small
			has_province_modifier = half_orcish_minority_oppressed_large
			has_province_modifier = half_orcish_minority_coexisting_large
			has_province_modifier = half_orcish_minority_integrated_large
		}
	}
}
has_half_orcish_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_half_orcish_majority_tooltip
		OR = {
			has_province_modifier = half_orcish_majority_oppressed
			has_province_modifier = half_orcish_majority_coexisting
			has_province_modifier = half_orcish_majority_integrated
		}
	}
}
has_small_half_orcish_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_half_orcish_minority_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_oppressed_small
			has_province_modifier = half_orcish_minority_coexisting_small
			has_province_modifier = half_orcish_minority_integrated_small
		}
	}
}
has_large_half_orcish_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_half_orcish_minority_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_oppressed_large
			has_province_modifier = half_orcish_minority_coexisting_large
			has_province_modifier = half_orcish_minority_integrated_large
		}
	}
}
has_oppressed_half_orcish_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_half_orcish_minority_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_oppressed_small
			has_province_modifier = half_orcish_minority_oppressed_large
		}
	}
}
has_oppressed_half_orcish_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_half_orcish_pop_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_oppressed_small
			has_province_modifier = half_orcish_minority_oppressed_large
			has_province_modifier = half_orcish_majority_oppressed
		}
	}
}
has_integrated_half_orcish_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_half_orcish_minority_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_integrated_small
			has_province_modifier = half_orcish_minority_integrated_large
		}
	}
}
has_integrated_half_orcish_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_half_orcish_pop_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_integrated_small
			has_province_modifier = half_orcish_minority_integrated_large
			has_province_modifier = half_orcish_majority_integrated
		}
	}
}
has_coexisting_half_orcish_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_half_orcish_minority_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_coexisting_small
			has_province_modifier = half_orcish_minority_coexisting_large
		}
	}
}
has_coexisting_half_orcish_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_half_orcish_pop_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_coexisting_small
			has_province_modifier = half_orcish_minority_coexisting_large
			has_province_modifier = half_orcish_majority_coexisting
		}
	}
}
# Country level
max_tolerance_half_orcish_race_trigger = {	# Is half_orcish tolerance = 100
	check_variable = {
		which = half_orcish_race_tolerance
		which = 100
	}
}
high_tolerance_half_orcish_race_trigger = {	# Is Orcish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_half_orcish_people_tooltip
		OR = {
			check_variable = {
				which = half_orcish_race_tolerance
				value = 70
			}
			has_country_modifier = half_orcish_administration
		}
	}
}
medium_tolerance_half_orcish_race_trigger = {	# Is Orcish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_half_orcish_people_tooltip
		NOT = { has_country_modifier = half_orcish_administration }
		check_variable = {
			which = half_orcish_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = half_orcish_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_half_orcish_race_trigger = {	# Is Orcish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_half_orcish_people_tooltip
		NOT = { has_country_modifier = half_orcish_administration }
		NOT = {
			check_variable = {
				which = half_orcish_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_half_orcish_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	custom_trigger_tooltip = {
		tooltip = have_unmatching_half_orcish_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_half_orcish_race_trigger = yes }
				OR = {
					has_coexisting_half_orcish_pop_trigger = yes
					has_oppressed_half_orcish_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_half_orcish_race_trigger = yes }
				OR = {
					has_integrated_half_orcish_pop_trigger = yes
					has_oppressed_half_orcish_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_half_orcish_race_trigger = yes }
				OR = {
					has_integrated_half_orcish_pop_trigger = yes
					has_coexisting_half_orcish_pop_trigger = yes
				}
			}
		}
	}
}
# For Ai Only
ai_lower_than_wanted_tolerance_half_orcish = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = half_orcish_race_tolerance
			which = half_orcish_race_tolerance_ai
		}
	}
}
ai_equal_to_wanted_tolerance_half_orcish = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = half_orcish_race_tolerance_ai
		which = half_orcish_race_tolerance
	}
}
ai_higher_than_wanted_tolerance_half_orcish = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = half_orcish_race_tolerance
		which = half_orcish_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = half_orcish_race_tolerance_ai
			which = half_orcish_race_tolerance
		}
	}
}


# KOBOLD -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_kobold_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_kobold_minority_tooltip
		OR = {
			has_province_modifier = kobold_minority_oppressed_small
			has_province_modifier = kobold_minority_coexisting_small
			has_province_modifier = kobold_minority_integrated_small
			has_province_modifier = kobold_minority_oppressed_large
			has_province_modifier = kobold_minority_coexisting_large
			has_province_modifier = kobold_minority_integrated_large
		}
	}
}
has_kobold_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_kobold_majority_tooltip
		OR = {
			has_province_modifier = kobold_majority_oppressed
			has_province_modifier = kobold_majority_coexisting
			has_province_modifier = kobold_majority_integrated
		}
	}
}
has_small_kobold_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_kobold_minority_tooltip
		OR = {
			has_province_modifier = kobold_minority_oppressed_small
			has_province_modifier = kobold_minority_coexisting_small
			has_province_modifier = kobold_minority_integrated_small
		}
	}
}
has_large_kobold_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_kobold_minority_tooltip
		OR = {
			has_province_modifier = kobold_minority_oppressed_large
			has_province_modifier = kobold_minority_coexisting_large
			has_province_modifier = kobold_minority_integrated_large
		}
	}
}
has_oppressed_kobold_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_kobold_minority_tooltip
		OR = {
			has_province_modifier = kobold_minority_oppressed_small
			has_province_modifier = kobold_minority_oppressed_large
		}
	}
}
has_oppressed_kobold_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_kobold_pop_tooltip
		OR = {
			has_province_modifier = kobold_minority_oppressed_small
			has_province_modifier = kobold_minority_oppressed_large
			has_province_modifier = kobold_majority_oppressed
		}
	}
}
has_integrated_kobold_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_kobold_minority_tooltip
		OR = {
			has_province_modifier = kobold_minority_integrated_small
			has_province_modifier = kobold_minority_integrated_large
		}
	}
}
has_integrated_kobold_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_kobold_pop_tooltip
		OR = {
			has_province_modifier = kobold_minority_integrated_small
			has_province_modifier = kobold_minority_integrated_large
			has_province_modifier = kobold_majority_integrated
		}
	}
}
has_coexisting_kobold_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_kobold_minority_tooltip
		OR = {
			has_province_modifier = kobold_minority_coexisting_small
			has_province_modifier = kobold_minority_coexisting_large
		}
	}
}
has_coexisting_kobold_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_kobold_pop_tooltip
		OR = {
			has_province_modifier = kobold_minority_coexisting_small
			has_province_modifier = kobold_minority_coexisting_large
			has_province_modifier = kobold_majority_coexisting
		}
	}
}
# Country level
max_tolerance_kobold_race_trigger = {	# Is kobold tolerance = 100
	check_variable = {
		which = kobold_race_tolerance
		which = 100
	}
}
high_tolerance_kobold_race_trigger = {	# Is Orcish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_kobold_people_tooltip
		OR = {
			check_variable = {
				which = kobold_race_tolerance
				value = 70
			}
			has_country_modifier = kobold_administration
		}
	}
}
medium_tolerance_kobold_race_trigger = {	# Is Orcish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_kobold_people_tooltip
		NOT = { has_country_modifier = kobold_administration }
		check_variable = {
			which = kobold_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = kobold_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_kobold_race_trigger = {	# Is Orcish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_kobold_people_tooltip
		NOT = { has_country_modifier = kobold_administration }
		NOT = {
			check_variable = {
				which = kobold_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_kobold_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	custom_trigger_tooltip = {
		tooltip = have_unmatching_kobold_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_kobold_race_trigger = yes }
				OR = {
					has_coexisting_kobold_pop_trigger = yes
					has_oppressed_kobold_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_kobold_race_trigger = yes }
				OR = {
					has_integrated_kobold_pop_trigger = yes
					has_oppressed_kobold_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_kobold_race_trigger = yes }
				OR = {
					has_integrated_kobold_pop_trigger = yes
					has_coexisting_kobold_pop_trigger = yes
				}
			}
		}
	}
}
# For Ai Only
ai_lower_than_wanted_tolerance_kobold = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = kobold_race_tolerance
			which = kobold_race_tolerance_ai
		}
	}
}
ai_equal_to_wanted_tolerance_kobold = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = kobold_race_tolerance_ai
		which = kobold_race_tolerance
	}
}
ai_higher_than_wanted_tolerance_kobold = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = kobold_race_tolerance
		which = kobold_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = kobold_race_tolerance_ai
			which = kobold_race_tolerance
		}
	}
}


# HUMAN -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_human_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_human_minority_tooltip
		OR = {
			has_province_modifier = human_minority_oppressed_small
			has_province_modifier = human_minority_coexisting_small
			has_province_modifier = human_minority_integrated_small
			has_province_modifier = human_minority_oppressed_large
			has_province_modifier = human_minority_coexisting_large
			has_province_modifier = human_minority_integrated_large
		}
	}
}
has_human_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_human_majority_tooltip
		OR = {
			has_province_modifier = human_majority_oppressed
			has_province_modifier = human_majority_coexisting
			has_province_modifier = human_majority_integrated
		}
	}
}
has_small_human_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_human_minority_tooltip
		OR = {
			has_province_modifier = human_minority_oppressed_small
			has_province_modifier = human_minority_coexisting_small
			has_province_modifier = human_minority_integrated_small
		}
	}
}
has_large_human_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_human_minority_tooltip
		OR = {
			has_province_modifier = human_minority_oppressed_large
			has_province_modifier = human_minority_coexisting_large
			has_province_modifier = human_minority_integrated_large
		}
	}
}
has_oppressed_human_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_human_minority_tooltip
		OR = {
			has_province_modifier = human_minority_oppressed_small
			has_province_modifier = human_minority_oppressed_large
		}
	}
}
has_oppressed_human_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_human_pop_tooltip
		OR = {
			has_province_modifier = human_minority_oppressed_small
			has_province_modifier = human_minority_oppressed_large
			has_province_modifier = human_majority_oppressed
		}
	}
}
has_integrated_human_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_human_minority_tooltip
		OR = {
			has_province_modifier = human_minority_integrated_small
			has_province_modifier = human_minority_integrated_large
		}
	}
}
has_integrated_human_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_human_pop_tooltip
		OR = {
			has_province_modifier = human_minority_integrated_small
			has_province_modifier = human_minority_integrated_large
			has_province_modifier = human_majority_integrated
		}
	}
}
has_coexisting_human_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_human_minority_tooltip
		OR = {
			has_province_modifier = human_minority_coexisting_small
			has_province_modifier = human_minority_coexisting_large
		}
	}
}
has_coexisting_human_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_human_pop_tooltip
		OR = {
			has_province_modifier = human_minority_coexisting_small
			has_province_modifier = human_minority_coexisting_large
			has_province_modifier = human_majority_coexisting
		}
	}
}
# Country level
max_tolerance_human_race_trigger = {	# Is human tolerance = 100
	check_variable = {
		which = human_race_tolerance
		which = 100
	}
}
high_tolerance_human_race_trigger = {	# Is Orcish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_human_people_tooltip
		OR = {
			check_variable = {
				which = human_race_tolerance
				value = 70
			}
			has_country_modifier = human_administration
		}
	}
}
medium_tolerance_human_race_trigger = {	# Is Orcish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_human_people_tooltip
		NOT = { has_country_modifier = human_administration }
		check_variable = {
			which = human_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = human_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_human_race_trigger = {	# Is Orcish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_human_people_tooltip
		NOT = { has_country_modifier = human_administration }
		NOT = {
			check_variable = {
				which = human_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_human_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	custom_trigger_tooltip = {
		tooltip = have_unmatching_human_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_human_race_trigger = yes }
				OR = {
					has_coexisting_human_pop_trigger = yes
					has_oppressed_human_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_human_race_trigger = yes }
				OR = {
					has_integrated_human_pop_trigger = yes
					has_oppressed_human_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_human_race_trigger = yes }
				OR = {
					has_integrated_human_pop_trigger = yes
					has_coexisting_human_pop_trigger = yes
				}
			}
		}
	}
}
# For Ai Only
ai_lower_than_wanted_tolerance_human = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = human_race_tolerance
			which = human_race_tolerance_ai
		}
	}
}
ai_equal_to_wanted_tolerance_human = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = human_race_tolerance_ai
		which = human_race_tolerance
	}
}
ai_higher_than_wanted_tolerance_human = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = human_race_tolerance
		which = human_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = human_race_tolerance_ai
			which = human_race_tolerance
		}
	}
}


# GNOLLISH -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_gnollish_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_gnollish_minority_tooltip
		OR = {
			has_province_modifier = gnollish_minority_oppressed_small
			has_province_modifier = gnollish_minority_coexisting_small
			has_province_modifier = gnollish_minority_integrated_small
			has_province_modifier = gnollish_minority_oppressed_large
			has_province_modifier = gnollish_minority_coexisting_large
			has_province_modifier = gnollish_minority_integrated_large
		}
	}
}
has_gnollish_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_gnollish_majority_tooltip
		OR = {
			has_province_modifier = gnollish_majority_oppressed
			has_province_modifier = gnollish_majority_coexisting
			has_province_modifier = gnollish_majority_integrated
		}
	}
}
has_small_gnollish_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_gnollish_minority_tooltip
		OR = {
			has_province_modifier = gnollish_minority_oppressed_small
			has_province_modifier = gnollish_minority_coexisting_small
			has_province_modifier = gnollish_minority_integrated_small
		}
	}
}
has_large_gnollish_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_gnollish_minority_tooltip
		OR = {
			has_province_modifier = gnollish_minority_oppressed_large
			has_province_modifier = gnollish_minority_coexisting_large
			has_province_modifier = gnollish_minority_integrated_large
		}
	}
}
has_oppressed_gnollish_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_gnollish_minority_tooltip
		OR = {
			has_province_modifier = gnollish_minority_oppressed_small
			has_province_modifier = gnollish_minority_oppressed_large
		}
	}
}
has_oppressed_gnollish_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_gnollish_pop_tooltip
		OR = {
			has_province_modifier = gnollish_minority_oppressed_small
			has_province_modifier = gnollish_minority_oppressed_large
			has_province_modifier = gnollish_majority_oppressed
		}
	}
}
has_integrated_gnollish_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_gnollish_minority_tooltip
		OR = {
			has_province_modifier = gnollish_minority_integrated_small
			has_province_modifier = gnollish_minority_integrated_large
		}
	}
}
has_integrated_gnollish_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_gnollish_pop_tooltip
		OR = {
			has_province_modifier = gnollish_minority_integrated_small
			has_province_modifier = gnollish_minority_integrated_large
			has_province_modifier = gnollish_majority_integrated
		}
	}
}
has_coexisting_gnollish_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_gnollish_minority_tooltip
		OR = {
			has_province_modifier = gnollish_minority_coexisting_small
			has_province_modifier = gnollish_minority_coexisting_large
		}
	}
}
has_coexisting_gnollish_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_gnollish_pop_tooltip
		OR = {
			has_province_modifier = gnollish_minority_coexisting_small
			has_province_modifier = gnollish_minority_coexisting_large
			has_province_modifier = gnollish_majority_coexisting
		}
	}
}
# Country level
max_tolerance_gnollish_race_trigger = {	# Is gnollish tolerance = 100
	check_variable = {
		which = gnollish_race_tolerance
		which = 100
	}
}
high_tolerance_gnollish_race_trigger = {	# Is Orcish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_gnollish_people_tooltip
		OR = {
			check_variable = {
				which = gnollish_race_tolerance
				value = 70
			}
			has_country_modifier = gnollish_administration
		}
	}
}
medium_tolerance_gnollish_race_trigger = {	# Is Orcish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_gnollish_people_tooltip
		NOT = { has_country_modifier = gnollish_administration }
		check_variable = {
			which = gnollish_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = gnollish_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_gnollish_race_trigger = {	# Is Orcish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_gnollish_people_tooltip
		NOT = { has_country_modifier = gnollish_administration }
		NOT = {
			check_variable = {
				which = gnollish_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_gnollish_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	custom_trigger_tooltip = {
		tooltip = have_unmatching_gnollish_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_gnollish_race_trigger = yes }
				OR = {
					has_coexisting_gnollish_pop_trigger = yes
					has_oppressed_gnollish_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_gnollish_race_trigger = yes }
				OR = {
					has_integrated_gnollish_pop_trigger = yes
					has_oppressed_gnollish_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_gnollish_race_trigger = yes }
				OR = {
					has_integrated_gnollish_pop_trigger = yes
					has_coexisting_gnollish_pop_trigger = yes
				}
			}
		}
	}
}
# For Ai Only
ai_lower_than_wanted_tolerance_gnollish = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = gnollish_race_tolerance
			which = gnollish_race_tolerance_ai
		}
	}
}
ai_equal_to_wanted_tolerance_gnollish = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = gnollish_race_tolerance_ai
		which = gnollish_race_tolerance
	}
}
ai_higher_than_wanted_tolerance_gnollish = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = gnollish_race_tolerance
		which = gnollish_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = gnollish_race_tolerance_ai
			which = gnollish_race_tolerance
		}
	}
}


# RUINBORN -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_ruinborn_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_ruinborn_minority_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_oppressed_small
			has_province_modifier = ruinborn_minority_coexisting_small
			has_province_modifier = ruinborn_minority_integrated_small
			has_province_modifier = ruinborn_minority_oppressed_large
			has_province_modifier = ruinborn_minority_coexisting_large
			has_province_modifier = ruinborn_minority_integrated_large
		}
	}
}
has_ruinborn_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_ruinborn_majority_tooltip
		OR = {
			has_province_modifier = ruinborn_majority_oppressed
			has_province_modifier = ruinborn_majority_coexisting
			has_province_modifier = ruinborn_majority_integrated
		}
	}
}
has_small_ruinborn_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_ruinborn_minority_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_oppressed_small
			has_province_modifier = ruinborn_minority_coexisting_small
			has_province_modifier = ruinborn_minority_integrated_small
		}
	}
}
has_large_ruinborn_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_ruinborn_minority_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_oppressed_large
			has_province_modifier = ruinborn_minority_coexisting_large
			has_province_modifier = ruinborn_minority_integrated_large
		}
	}
}
has_oppressed_ruinborn_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_ruinborn_minority_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_oppressed_small
			has_province_modifier = ruinborn_minority_oppressed_large
		}
	}
}
has_oppressed_ruinborn_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_ruinborn_pop_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_oppressed_small
			has_province_modifier = ruinborn_minority_oppressed_large
			has_province_modifier = ruinborn_majority_oppressed
		}
	}
}
has_integrated_ruinborn_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_ruinborn_minority_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_integrated_small
			has_province_modifier = ruinborn_minority_integrated_large
		}
	}
}
has_integrated_ruinborn_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_ruinborn_pop_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_integrated_small
			has_province_modifier = ruinborn_minority_integrated_large
			has_province_modifier = ruinborn_majority_integrated
		}
	}
}
has_coexisting_ruinborn_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_ruinborn_minority_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_coexisting_small
			has_province_modifier = ruinborn_minority_coexisting_large
		}
	}
}
has_coexisting_ruinborn_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_ruinborn_pop_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_coexisting_small
			has_province_modifier = ruinborn_minority_coexisting_large
			has_province_modifier = ruinborn_majority_coexisting
		}
	}
}
# Country level
max_tolerance_ruinborn_race_trigger = {	# Is ruinborn tolerance = 100
	check_variable = {
		which = ruinborn_race_tolerance
		which = 100
	}
}
high_tolerance_ruinborn_race_trigger = {	# Is Orcish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_ruinborn_people_tooltip
		OR = {
			check_variable = {
				which = ruinborn_race_tolerance
				value = 70
			}
			has_country_modifier = ruinborn_administration
		}
	}
}
medium_tolerance_ruinborn_race_trigger = {	# Is Orcish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_ruinborn_people_tooltip
		NOT = { has_country_modifier = ruinborn_administration }
		check_variable = {
			which = ruinborn_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = ruinborn_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_ruinborn_race_trigger = {	# Is Orcish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_ruinborn_people_tooltip
		NOT = { has_country_modifier = ruinborn_administration }
		NOT = {
			check_variable = {
				which = ruinborn_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_ruinborn_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	custom_trigger_tooltip = {
		tooltip = have_unmatching_ruinborn_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_ruinborn_race_trigger = yes }
				OR = {
					has_coexisting_ruinborn_pop_trigger = yes
					has_oppressed_ruinborn_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_ruinborn_race_trigger = yes }
				OR = {
					has_integrated_ruinborn_pop_trigger = yes
					has_oppressed_ruinborn_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_ruinborn_race_trigger = yes }
				OR = {
					has_integrated_ruinborn_pop_trigger = yes
					has_coexisting_ruinborn_pop_trigger = yes
				}
			}
		}
	}
}
# For Ai Only
ai_lower_than_wanted_tolerance_ruinborn = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = ruinborn_race_tolerance
			which = ruinborn_race_tolerance_ai
		}
	}
}
ai_equal_to_wanted_tolerance_ruinborn = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = ruinborn_race_tolerance_ai
		which = ruinborn_race_tolerance
	}
}
ai_higher_than_wanted_tolerance_ruinborn = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = ruinborn_race_tolerance
		which = ruinborn_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = ruinborn_race_tolerance_ai
			which = ruinborn_race_tolerance
		}
	}
}


# GOBLIN -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_goblin_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_goblin_minority_tooltip
		OR = {
			has_province_modifier = goblin_minority_oppressed_small
			has_province_modifier = goblin_minority_coexisting_small
			has_province_modifier = goblin_minority_integrated_small
			has_province_modifier = goblin_minority_oppressed_large
			has_province_modifier = goblin_minority_coexisting_large
			has_province_modifier = goblin_minority_integrated_large
		}
	}
}
has_goblin_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_goblin_majority_tooltip
		OR = {
			has_province_modifier = goblin_majority_oppressed
			has_province_modifier = goblin_majority_coexisting
			has_province_modifier = goblin_majority_integrated
		}
	}
}
has_small_goblin_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_goblin_minority_tooltip
		OR = {
			has_province_modifier = goblin_minority_oppressed_small
			has_province_modifier = goblin_minority_coexisting_small
			has_province_modifier = goblin_minority_integrated_small
		}
	}
}
has_large_goblin_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_goblin_minority_tooltip
		OR = {
			has_province_modifier = goblin_minority_oppressed_large
			has_province_modifier = goblin_minority_coexisting_large
			has_province_modifier = goblin_minority_integrated_large
		}
	}
}
has_oppressed_goblin_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_goblin_minority_tooltip
		OR = {
			has_province_modifier = goblin_minority_oppressed_small
			has_province_modifier = goblin_minority_oppressed_large
		}
	}
}
has_oppressed_goblin_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_goblin_pop_tooltip
		OR = {
			has_province_modifier = goblin_minority_oppressed_small
			has_province_modifier = goblin_minority_oppressed_large
			has_province_modifier = goblin_majority_oppressed
		}
	}
}
has_integrated_goblin_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_goblin_minority_tooltip
		OR = {
			has_province_modifier = goblin_minority_integrated_small
			has_province_modifier = goblin_minority_integrated_large
		}
	}
}
has_integrated_goblin_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_goblin_pop_tooltip
		OR = {
			has_province_modifier = goblin_minority_integrated_small
			has_province_modifier = goblin_minority_integrated_large
			has_province_modifier = goblin_majority_integrated
		}
	}
}
has_coexisting_goblin_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_goblin_minority_tooltip
		OR = {
			has_province_modifier = goblin_minority_coexisting_small
			has_province_modifier = goblin_minority_coexisting_large
		}
	}
}
has_coexisting_goblin_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_goblin_pop_tooltip
		OR = {
			has_province_modifier = goblin_minority_coexisting_small
			has_province_modifier = goblin_minority_coexisting_large
			has_province_modifier = goblin_majority_coexisting
		}
	}
}
# Country level
max_tolerance_goblin_race_trigger = {	# Is goblin tolerance = 100
	check_variable = {
		which = goblin_race_tolerance
		which = 100
	}
}
high_tolerance_goblin_race_trigger = {	# Is Orcish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_goblin_people_tooltip
		OR = {
			check_variable = {
				which = goblin_race_tolerance
				value = 70
			}
			has_country_modifier = goblin_administration
		}
	}
}
medium_tolerance_goblin_race_trigger = {	# Is Orcish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_goblin_people_tooltip
		NOT = { has_country_modifier = goblin_administration }
		check_variable = {
			which = goblin_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = goblin_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_goblin_race_trigger = {	# Is Orcish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_goblin_people_tooltip
		NOT = { has_country_modifier = goblin_administration }
		NOT = {
			check_variable = {
				which = goblin_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_goblin_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	custom_trigger_tooltip = {
		tooltip = have_unmatching_goblin_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_goblin_race_trigger = yes }
				OR = {
					has_coexisting_goblin_pop_trigger = yes
					has_oppressed_goblin_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_goblin_race_trigger = yes }
				OR = {
					has_integrated_goblin_pop_trigger = yes
					has_oppressed_goblin_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_goblin_race_trigger = yes }
				OR = {
					has_integrated_goblin_pop_trigger = yes
					has_coexisting_goblin_pop_trigger = yes
				}
			}
		}
	}
}
# For Ai Only
ai_lower_than_wanted_tolerance_goblin = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = goblin_race_tolerance
			which = goblin_race_tolerance_ai
		}
	}
}
ai_equal_to_wanted_tolerance_goblin = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = goblin_race_tolerance_ai
		which = goblin_race_tolerance
	}
}
ai_higher_than_wanted_tolerance_goblin = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = goblin_race_tolerance
		which = goblin_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = goblin_race_tolerance_ai
			which = goblin_race_tolerance
		}
	}
}


# HARPY -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_harpy_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_harpy_minority_tooltip
		OR = {
			has_province_modifier = harpy_minority_oppressed_small
			has_province_modifier = harpy_minority_coexisting_small
			has_province_modifier = harpy_minority_integrated_small
			has_province_modifier = harpy_minority_oppressed_large
			has_province_modifier = harpy_minority_coexisting_large
			has_province_modifier = harpy_minority_integrated_large
		}
	}
}
has_harpy_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_harpy_majority_tooltip
		OR = {
			has_province_modifier = harpy_majority_oppressed
			has_province_modifier = harpy_majority_coexisting
			has_province_modifier = harpy_majority_integrated
		}
	}
}
has_small_harpy_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_harpy_minority_tooltip
		OR = {
			has_province_modifier = harpy_minority_oppressed_small
			has_province_modifier = harpy_minority_coexisting_small
			has_province_modifier = harpy_minority_integrated_small
		}
	}
}
has_large_harpy_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_harpy_minority_tooltip
		OR = {
			has_province_modifier = harpy_minority_oppressed_large
			has_province_modifier = harpy_minority_coexisting_large
			has_province_modifier = harpy_minority_integrated_large
		}
	}
}
has_oppressed_harpy_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_harpy_minority_tooltip
		OR = {
			has_province_modifier = harpy_minority_oppressed_small
			has_province_modifier = harpy_minority_oppressed_large
		}
	}
}
has_oppressed_harpy_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_harpy_pop_tooltip
		OR = {
			has_province_modifier = harpy_minority_oppressed_small
			has_province_modifier = harpy_minority_oppressed_large
			has_province_modifier = harpy_majority_oppressed
		}
	}
}
has_integrated_harpy_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_harpy_minority_tooltip
		OR = {
			has_province_modifier = harpy_minority_integrated_small
			has_province_modifier = harpy_minority_integrated_large
		}
	}
}
has_integrated_harpy_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_harpy_pop_tooltip
		OR = {
			has_province_modifier = harpy_minority_integrated_small
			has_province_modifier = harpy_minority_integrated_large
			has_province_modifier = harpy_majority_integrated
		}
	}
}
has_coexisting_harpy_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_harpy_minority_tooltip
		OR = {
			has_province_modifier = harpy_minority_coexisting_small
			has_province_modifier = harpy_minority_coexisting_large
		}
	}
}
has_coexisting_harpy_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_harpy_pop_tooltip
		OR = {
			has_province_modifier = harpy_minority_coexisting_small
			has_province_modifier = harpy_minority_coexisting_large
			has_province_modifier = harpy_majority_coexisting
		}
	}
}
# Country level
max_tolerance_harpy_race_trigger = {	# Is harpy tolerance = 100
	check_variable = {
		which = harpy_race_tolerance
		which = 100
	}
}
high_tolerance_harpy_race_trigger = {	# Is Orcish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_harpy_people_tooltip
		OR = {
			check_variable = {
				which = harpy_race_tolerance
				value = 70
			}
			has_country_modifier = harpy_administration
		}
	}
}
medium_tolerance_harpy_race_trigger = {	# Is Orcish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_harpy_people_tooltip
		NOT = { has_country_modifier = harpy_administration }
		check_variable = {
			which = harpy_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = harpy_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_harpy_race_trigger = {	# Is Orcish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_harpy_people_tooltip
		NOT = { has_country_modifier = harpy_administration }
		NOT = {
			check_variable = {
				which = harpy_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_harpy_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	custom_trigger_tooltip = {
		tooltip = have_unmatching_harpy_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_harpy_race_trigger = yes }
				OR = {
					has_coexisting_harpy_pop_trigger = yes
					has_oppressed_harpy_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_harpy_race_trigger = yes }
				OR = {
					has_integrated_harpy_pop_trigger = yes
					has_oppressed_harpy_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_harpy_race_trigger = yes }
				OR = {
					has_integrated_harpy_pop_trigger = yes
					has_coexisting_harpy_pop_trigger = yes
				}
			}
		}
	}
}
# For Ai Only
ai_lower_than_wanted_tolerance_harpy = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = harpy_race_tolerance
			which = harpy_race_tolerance_ai
		}
	}
}
ai_equal_to_wanted_tolerance_harpy = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = harpy_race_tolerance_ai
		which = harpy_race_tolerance
	}
}
ai_higher_than_wanted_tolerance_harpy = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = harpy_race_tolerance
		which = harpy_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = harpy_race_tolerance_ai
			which = harpy_race_tolerance
		}
	}
}


# TROLL -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_troll_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_troll_minority_tooltip
		OR = {
			has_province_modifier = troll_minority_oppressed_small
			has_province_modifier = troll_minority_coexisting_small
			has_province_modifier = troll_minority_integrated_small
			has_province_modifier = troll_minority_oppressed_large
			has_province_modifier = troll_minority_coexisting_large
			has_province_modifier = troll_minority_integrated_large
		}
	}
}
has_troll_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_troll_majority_tooltip
		OR = {
			has_province_modifier = troll_majority_oppressed
			has_province_modifier = troll_majority_coexisting
			has_province_modifier = troll_majority_integrated
		}
	}
}
has_small_troll_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_troll_minority_tooltip
		OR = {
			has_province_modifier = troll_minority_oppressed_small
			has_province_modifier = troll_minority_coexisting_small
			has_province_modifier = troll_minority_integrated_small
		}
	}
}
has_large_troll_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_troll_minority_tooltip
		OR = {
			has_province_modifier = troll_minority_oppressed_large
			has_province_modifier = troll_minority_coexisting_large
			has_province_modifier = troll_minority_integrated_large
		}
	}
}
has_oppressed_troll_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_troll_minority_tooltip
		OR = {
			has_province_modifier = troll_minority_oppressed_small
			has_province_modifier = troll_minority_oppressed_large
		}
	}
}
has_oppressed_troll_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_troll_pop_tooltip
		OR = {
			has_province_modifier = troll_minority_oppressed_small
			has_province_modifier = troll_minority_oppressed_large
			has_province_modifier = troll_majority_oppressed
		}
	}
}
has_integrated_troll_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_troll_minority_tooltip
		OR = {
			has_province_modifier = troll_minority_integrated_small
			has_province_modifier = troll_minority_integrated_large
		}
	}
}
has_integrated_troll_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_troll_pop_tooltip
		OR = {
			has_province_modifier = troll_minority_integrated_small
			has_province_modifier = troll_minority_integrated_large
			has_province_modifier = troll_majority_integrated
		}
	}
}
has_coexisting_troll_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_troll_minority_tooltip
		OR = {
			has_province_modifier = troll_minority_coexisting_small
			has_province_modifier = troll_minority_coexisting_large
		}
	}
}
has_coexisting_troll_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_troll_pop_tooltip
		OR = {
			has_province_modifier = troll_minority_coexisting_small
			has_province_modifier = troll_minority_coexisting_large
			has_province_modifier = troll_majority_coexisting
		}
	}
}
# Country level
max_tolerance_troll_race_trigger = {	# Is troll tolerance = 100
	check_variable = {
		which = troll_race_tolerance
		which = 100
	}
}
high_tolerance_troll_race_trigger = {	# Is Orcish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_troll_people_tooltip
		OR = {
			check_variable = {
				which = troll_race_tolerance
				value = 70
			}
			has_country_modifier = troll_administration
		}
	}
}
medium_tolerance_troll_race_trigger = {	# Is Orcish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_troll_people_tooltip
		NOT = { has_country_modifier = troll_administration }
		check_variable = {
			which = troll_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = troll_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_troll_race_trigger = {	# Is Orcish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_troll_people_tooltip
		NOT = { has_country_modifier = troll_administration }
		NOT = {
			check_variable = {
				which = troll_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_troll_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	custom_trigger_tooltip = {
		tooltip = have_unmatching_troll_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_troll_race_trigger = yes }
				OR = {
					has_coexisting_troll_pop_trigger = yes
					has_oppressed_troll_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_troll_race_trigger = yes }
				OR = {
					has_integrated_troll_pop_trigger = yes
					has_oppressed_troll_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_troll_race_trigger = yes }
				OR = {
					has_integrated_troll_pop_trigger = yes
					has_coexisting_troll_pop_trigger = yes
				}
			}
		}
	}
}
# For Ai Only
ai_lower_than_wanted_tolerance_troll = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = troll_race_tolerance
			which = troll_race_tolerance_ai
		}
	}
}
ai_equal_to_wanted_tolerance_troll = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = troll_race_tolerance_ai
		which = troll_race_tolerance
	}
}
ai_higher_than_wanted_tolerance_troll = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = troll_race_tolerance
		which = troll_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = troll_race_tolerance_ai
			which = troll_race_tolerance
		}
	}
}


# HALF ELVEN -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_half_elven_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_half_elven_minority_tooltip
		OR = {
			has_province_modifier = half_elven_minority_oppressed_small
			has_province_modifier = half_elven_minority_coexisting_small
			has_province_modifier = half_elven_minority_integrated_small
			has_province_modifier = half_elven_minority_oppressed_large
			has_province_modifier = half_elven_minority_coexisting_large
			has_province_modifier = half_elven_minority_integrated_large
		}
	}
}
has_half_elven_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_half_elven_majority_tooltip
		OR = {
			has_province_modifier = half_elven_majority_oppressed
			has_province_modifier = half_elven_majority_coexisting
			has_province_modifier = half_elven_majority_integrated
		}
	}
}
has_small_half_elven_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_half_elven_minority_tooltip
		OR = {
			has_province_modifier = half_elven_minority_oppressed_small
			has_province_modifier = half_elven_minority_coexisting_small
			has_province_modifier = half_elven_minority_integrated_small
		}
	}
}
has_large_half_elven_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_half_elven_minority_tooltip
		OR = {
			has_province_modifier = half_elven_minority_oppressed_large
			has_province_modifier = half_elven_minority_coexisting_large
			has_province_modifier = half_elven_minority_integrated_large
		}
	}
}
has_oppressed_half_elven_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_half_elven_minority_tooltip
		OR = {
			has_province_modifier = half_elven_minority_oppressed_small
			has_province_modifier = half_elven_minority_oppressed_large
		}
	}
}
has_oppressed_half_elven_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_half_elven_pop_tooltip
		OR = {
			has_province_modifier = half_elven_minority_oppressed_small
			has_province_modifier = half_elven_minority_oppressed_large
			has_province_modifier = half_elven_majority_oppressed
		}
	}
}
has_integrated_half_elven_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_half_elven_minority_tooltip
		OR = {
			has_province_modifier = half_elven_minority_integrated_small
			has_province_modifier = half_elven_minority_integrated_large
		}
	}
}
has_integrated_half_elven_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_half_elven_pop_tooltip
		OR = {
			has_province_modifier = half_elven_minority_integrated_small
			has_province_modifier = half_elven_minority_integrated_large
			has_province_modifier = half_elven_majority_integrated
		}
	}
}
has_coexisting_half_elven_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_half_elven_minority_tooltip
		OR = {
			has_province_modifier = half_elven_minority_coexisting_small
			has_province_modifier = half_elven_minority_coexisting_large
		}
	}
}
has_coexisting_half_elven_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_half_elven_pop_tooltip
		OR = {
			has_province_modifier = half_elven_minority_coexisting_small
			has_province_modifier = half_elven_minority_coexisting_large
			has_province_modifier = half_elven_majority_coexisting
		}
	}
}
# Country level
max_tolerance_half_elven_race_trigger = {	# Is half_elven tolerance = 100
	check_variable = {
		which = half_elven_race_tolerance
		which = 100
	}
}
high_tolerance_half_elven_race_trigger = {	# Is Orcish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_half_elven_people_tooltip
		OR = {
			check_variable = {
				which = half_elven_race_tolerance
				value = 70
			}
			has_country_modifier = half_elven_administration
		}
	}
}
medium_tolerance_half_elven_race_trigger = {	# Is Orcish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_half_half_elven_people_tooltip
		NOT = { has_country_modifier = half_elven_administration }
		check_variable = {
			which = half_elven_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = half_elven_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_half_elven_race_trigger = {	# Is Orcish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_half_elven_people_tooltip
		NOT = { has_country_modifier = half_elven_administration }
		NOT = {
			check_variable = {
				which = half_elven_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_half_elven_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	custom_trigger_tooltip = {
		tooltip = have_unmatching_half_elven_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_half_elven_race_trigger = yes }
				OR = {
					has_coexisting_half_elven_pop_trigger = yes
					has_oppressed_half_elven_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_half_elven_race_trigger = yes }
				OR = {
					has_integrated_half_elven_pop_trigger = yes
					has_oppressed_half_elven_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_half_elven_race_trigger = yes }
				OR = {
					has_integrated_half_elven_pop_trigger = yes
					has_coexisting_half_elven_pop_trigger = yes
				}
			}
		}
	}
}
# For Ai Only
ai_lower_than_wanted_tolerance_half_elven = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = half_elven_race_tolerance
			which = half_elven_race_tolerance_ai
		}
	}
}
ai_equal_to_wanted_tolerance_half_elven = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = half_elven_race_tolerance_ai
		which = half_elven_race_tolerance
	}
}
ai_higher_than_wanted_tolerance_half_elven = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = half_elven_race_tolerance
		which = half_elven_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = half_elven_race_tolerance_ai
			which = half_elven_race_tolerance
		}
	}
}


# ORCISH -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_orcish_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_orcish_minority_tooltip
		OR = {
			has_province_modifier = orcish_minority_oppressed_small
			has_province_modifier = orcish_minority_coexisting_small
			has_province_modifier = orcish_minority_integrated_small
			has_province_modifier = orcish_minority_oppressed_large
			has_province_modifier = orcish_minority_coexisting_large
			has_province_modifier = orcish_minority_integrated_large
		}
	}
}
has_orcish_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_orcish_majority_tooltip
		OR = {
			has_province_modifier = orcish_majority_oppressed
			has_province_modifier = orcish_majority_coexisting
			has_province_modifier = orcish_majority_integrated
		}
	}
}
has_small_orcish_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_orcish_minority_tooltip
		OR = {
			has_province_modifier = orcish_minority_oppressed_small
			has_province_modifier = orcish_minority_coexisting_small
			has_province_modifier = orcish_minority_integrated_small
		}
	}
}
has_large_orcish_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_orcish_minority_tooltip
		OR = {
			has_province_modifier = orcish_minority_oppressed_large
			has_province_modifier = orcish_minority_coexisting_large
			has_province_modifier = orcish_minority_integrated_large
		}
	}
}
has_oppressed_orcish_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_orcish_minority_tooltip
		OR = {
			has_province_modifier = orcish_minority_oppressed_small
			has_province_modifier = orcish_minority_oppressed_large
		}
	}
}
has_oppressed_orcish_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_orcish_pop_tooltip
		OR = {
			has_province_modifier = orcish_minority_oppressed_small
			has_province_modifier = orcish_minority_oppressed_large
			has_province_modifier = orcish_majority_oppressed
		}
	}
}
has_integrated_orcish_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_orcish_minority_tooltip
		OR = {
			has_province_modifier = orcish_minority_integrated_small
			has_province_modifier = orcish_minority_integrated_large
		}
	}
}
has_integrated_orcish_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_orcish_pop_tooltip
		OR = {
			has_province_modifier = orcish_minority_integrated_small
			has_province_modifier = orcish_minority_integrated_large
			has_province_modifier = orcish_majority_integrated
		}
	}
}
has_coexisting_orcish_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_orcish_minority_tooltip
		OR = {
			has_province_modifier = orcish_minority_coexisting_small
			has_province_modifier = orcish_minority_coexisting_large
		}
	}
}
has_coexisting_orcish_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_orcish_pop_tooltip
		OR = {
			has_province_modifier = orcish_minority_coexisting_small
			has_province_modifier = orcish_minority_coexisting_large
			has_province_modifier = orcish_majority_coexisting
		}
	}
}
# Country level
max_tolerance_orcish_race_trigger = {	# Is orcish tolerance = 100
	check_variable = {
		which = orcish_race_tolerance
		which = 100
	}
}
high_tolerance_orcish_race_trigger = {	# Is Orcish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_orcish_people_tooltip
		OR = {
			check_variable = {
				which = orcish_race_tolerance
				value = 70
			}
			has_country_modifier = orcish_administration
		}
	}
}
medium_tolerance_orcish_race_trigger = {	# Is Orcish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_orcish_people_tooltip
		NOT = { has_country_modifier = orcish_administration }
		check_variable = {
			which = orcish_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = orcish_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_orcish_race_trigger = {	# Is Orcish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_orcish_people_tooltip
		NOT = { has_country_modifier = orcish_administration }
		NOT = {
			check_variable = {
				which = orcish_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_orcish_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	custom_trigger_tooltip = {
		tooltip = have_unmatching_orcish_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_orcish_race_trigger = yes }
				OR = {
					has_coexisting_orcish_pop_trigger = yes
					has_oppressed_orcish_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_orcish_race_trigger = yes }
				OR = {
					has_integrated_orcish_pop_trigger = yes
					has_oppressed_orcish_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_orcish_race_trigger = yes }
				OR = {
					has_integrated_orcish_pop_trigger = yes
					has_coexisting_orcish_pop_trigger = yes
				}
			}
		}
	}
}
# For Ai Only
ai_lower_than_wanted_tolerance_orcish = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = orcish_race_tolerance
			which = orcish_race_tolerance_ai
		}
	}
}
ai_equal_to_wanted_tolerance_orcish = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = orcish_race_tolerance_ai
		which = orcish_race_tolerance
	}
}
ai_higher_than_wanted_tolerance_orcish = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = orcish_race_tolerance
		which = orcish_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = orcish_race_tolerance_ai
			which = orcish_race_tolerance
		}
	}
}