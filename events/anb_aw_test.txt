namespace = aw_test

#The Adventurers Wanted uses a strict ID system to make the system easier to author content for
#The IDs below 100 are core utility systems that are usually straight copies or modifications of how the AW system works, such as monsters being able to migrate and be defeated by adventurers.
#The IDs above 100 are more unique situations for the specific encounter, but they should correlate with the numbers from above: if ID 10s deal with migration, then ID 110s should be the unique events to do with migration - for example bribing a Thieves Guild to GTFO your country
#Crazy and more uniques ones that dont conform to the utilities should be ID 200

#USE THE anb_aw_test TO SEE A SIMPLE COPY-PASTABLE FORMAT IN ADDITION TO STUFF LIKE MIGRATION STYLES ETC
#Search for CHANGEABLE for the criteria you should change in that file and this one

#################################################################
# Welcome to the master file for the Adventurers Wanted System. In the comments below you'll see copy-pastable events for you to choose, different migration styles as well as prebuilt events to handle stuff like spawning rebellions
#################################################################

#0 - spawn in province
province_event = {
    id = aw_test.0
    title = aw_test.0.t
    desc = aw_test.0.d
    picture = COMET_SIGHTED_eventPicture
    goto = ROOT
    
    is_triggered_only = yes
    #hidden = yes
    
    #yup thats happening
    option = {
        name = aw_basic.0.a
        ai_chance = { 
            factor = 1 
        }
        add_permanent_province_modifier  = {
            name = aw_test_1
            duration = -1  
        }
    }
    # grant adventurer's generous rewards to look after it
    option = {  
        name = aw_basic.0.b
        ai_chance = { 
            factor = 20 
            modifier = {
                factor = 0
                owner = { is_in_deficit = yes }
            }
        }
        trigger = {
            owner = { has_estate = estate_adventurers }
            owner = { NOT = { has_estate_privilege = estate_adventurers_generous_quest_rewards } }
        }
        owner = { set_estate_privilege = estate_adventurers_generous_quest_rewards }
        add_permanent_province_modifier = {
            name = aw_test_1
            duration = -1  
        }
    }
    # we already are granting generous rewards
    option = { 
        name = aw_basic.0.c
        ai_chance = { factor = 50 }
        trigger = {
            owner = { has_estate = estate_adventurers }
            owner = { has_estate_privilege = estate_adventurers_generous_quest_rewards }
        }
        add_permanent_province_modifier  = {
            name = aw_test_1
            duration = -1  
        }
        custom_tooltip = aw_has_adventurer_generous_rewards
    }
    # we are adventurers, deal with it ourselves!
    option = { 
        name = aw_basic.0.dd
        ai_chance = { factor = 50 }
        trigger = {
            owner = { has_adventurer_reform = yes }
        }
        add_permanent_province_modifier  = {
            name = aw_test_1
            duration = -1  
        }
    }
}


#1 - event manager, called by on_actions. This happens ONCE per pulse. If you have 7 of these, it still only fires the manager once
province_event = {
    id = aw_test.1
    title = aw_test.1.t
    desc = aw_test.1.d
    picture = COMET_SIGHTED_eventPicture
    goto = ROOT
    
    hidden = yes
    is_triggered_only = yes
    

    trigger = {
        OR = { 
            has_province_modifier = aw_test_1
            has_province_modifier = aw_test_2
            has_province_modifier = aw_test_3
        }
    }
	
	option = {
		hidden_effect = {
			random_list = {
				1 = { # vanish
					province_event = { id = aw_test.10 }
				}
                1 = {
                    province_event = { id = aw_test.12 }
                }
			}
		}
	}
    
}


#2 - notification of advanturers wanted spawning

############## 10s - Migration and Propagation ###################

#10 - basic migration
province_event = {
    id = aw_test.10
    title = aw_test.10.t
    desc = aw_test.10.d
    picture = COMET_SIGHTED_eventPicture
    goto = ROOT
    
    hidden = no
    is_triggered_only = yes
    
    trigger = {
        OR = {
            has_province_modifier = aw_test_1
            has_province_modifier = aw_test_2
            has_province_modifier = aw_test_3
        }
    }
    
    immediate = {
        hidden_effect = {

            ######################################################################
            #Here's a list of all migration types for you to copy and paste
            #Note: you may need to add something in the trigger = { } above, for example for random_neighbour_province, as you might want to check if this valid province even has a neighbour you can migrate to!
            ######################################################################

            #CHANGEABLE - MIGRATION TYPE - Any adjacent province
            random_neighbor_province = {
                limit = {
                    #Base Conditions
                    is_city = yes

                    NOT = { has_province_modifier = aw_test_1 }
                    NOT = { has_province_modifier = aw_test_2 }
                    NOT = { has_province_modifier = aw_test_3 }


                    #Specific Conditions
                   
                }
                save_event_target_as = infestation_migration_target
            }

            #CHANGEABLE - MIGRATION TYPE - Any province within my region - dont do area as those are too small. its essentially adjacent anyway
            random_province = {
                limit = {
                    region = ROOT
                    NOT = { province_id = ROOT }

                    is_city = yes

                    NOT = { has_province_modifier = aw_test_1 }
                    NOT = { has_province_modifier = aw_test_2 }
                    NOT = { has_province_modifier = aw_test_3 }

                }
                save_event_target_as = infestation_migration_target
            }

            #CHANGEABLE - MIGRATION TYPE - Any province within my country
            owner = {
                random_owned_province = {
                    limit = {
                        #Base Conditions
                        NOT = { province_id = ROOT }
                        is_city = yes

                        NOT = { has_province_modifier = aw_test_1 }
                        NOT = { has_province_modifier = aw_test_2 }
                        NOT = { has_province_modifier = aw_test_3 }


                        #Specific Conditions
                       
                    }
                    save_event_target_as = infestation_migration_target
                }
            }

            #CHANGEABLE - MIGRATION TYPE -  Any province in THE WORLD  (do not use this unless necessary as this is very resource intensive!)
            owner = {
                random_province = {
                    limit = {
                        #Base Conditions
                        NOT = { province_id = ROOT }
                        is_city = yes

                        NOT = { has_province_modifier = aw_test_1 }
                        NOT = { has_province_modifier = aw_test_2 }
                        NOT = { has_province_modifier = aw_test_3 }


                        #Specific Conditions
                       
                    }
                    save_event_target_as = infestation_migration_target
                }
            }
        }
    }

    #If migration is within country
    option = {  
        name = aw_test.10.a
        ai_chance = { factor = 100 }
        goto = infestation_migration_target
        trigger = {
            event_target:infestation_migration_target = {
                 owned_by = ROOT
            }
        }

        #It's migration, so remove modifier from previous province
        tooltip = { #this is fake. the real one happens below
            remove_province_modifier = aw_test_1
            remove_province_modifier = aw_test_2
            remove_province_modifier = aw_test_3
        }

        event_target:infestation_migration_target = {
            if = {
                limit = {
                    owned_by = ROOT
                }

                #real removal. the other real one is in the called event in the else
                remove_province_modifier = aw_test_1
                remove_province_modifier = aw_test_2
                remove_province_modifier = aw_test_3


                #CHANGEABLE - SPREAD TYPE: Tier makes Tier of the same at target
                if = {
                    limit = {
                        FROM = { has_province_modifier = aw_test_1 }
                    }
                    add_permanent_province_modifier = { 
                        name = aw_test_1
                        duration = -1
                    }
                }
                else_if = {
                    limit = {
                        FROM = { has_province_modifier = aw_test_2 }
                    }
                    add_permanent_province_modifier = { 
                        name = aw_test_2
                        duration = -1
                    }
                }
                else_if = {
                    limit = {
                        FROM = { has_province_modifier = aw_test_3 }
                    }
                    add_permanent_province_modifier = { 
                        name = aw_test_3
                        duration = -1
                    }
                }
            }
        }
    }

    #If migration is sent to OTHER country
    option = {  
        name = aw_test.10.b
        ai_chance = { factor = 100 }
        goto = infestation_migration_target
        trigger = {
            event_target:infestation_migration_target = {
                NOT = { owned_by = ROOT }   #if the target isnt in your country, then send an event to them that notifies + adds it on their end
            }
        }

        #It's migration, so remove modifier from previous province
        tooltip = { #this is fake. the real one happens via the event
            remove_province_modifier = aw_test_1
            remove_province_modifier = aw_test_2
            remove_province_modifier = aw_test_3
        }

        event_target:infestation_migration_target = {
            province_event = {
                id = aw_test.11
                days = 14
                #random = 31
            }
        }
    }
}

#11 - migration target notification if it goes to other country
province_event = {
    id = aw_test.11
    title = aw_test.11.t
    desc = aw_test.11.d
    picture = COMET_SIGHTED_eventPicture
    goto = ROOT
    
    hidden = no
    is_triggered_only = yes
    
    option = {
        # deal with it ourselves
        name = aw_basic.0.a
        ai_chance = { 
            factor = 20 
            modifier = {
                factor = 0
                owner = { is_in_deficit = yes }
            }
        }
        trigger = {
            owner = { has_estate = estate_adventurers }
            owner = { NOT = { has_estate_privilege = estate_adventurers_generous_quest_rewards } }
        }

        owner = {
            add_opinion = {
                who = FROM
                modifier = infestation_crossed_border
            }
        }

        #CHANGEABLE - SPREAD TYPE: Tier makes Tier of the same at target (NOTE: THIS USUALLY SHOULD BE THE SAME AS id.10 above)
        if = {
            limit = {
                FROM = { has_province_modifier = aw_test_1 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_1
                duration = -1
            }
        }
        else_if = {
            limit = {
                FROM = { has_province_modifier = aw_test_2 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_2
                duration = -1
            }
        }
        else_if = {
            limit = {
                FROM = { has_province_modifier = aw_test_3 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_3
                duration = -1
            }
        }

    }

    option = {
        # grant adventurer's generous rewards to look after it
        name = aw_basic.0.b
        ai_chance = { 
            factor = 20 
            modifier = {
                factor = 0
                owner = { is_in_deficit = yes }
            }
        }
        trigger = {
            owner = { has_estate = estate_adventurers }
            owner = { NOT = { has_estate_privilege = estate_adventurers_generous_quest_rewards } }
        }

        owner = { set_estate_privilege = estate_adventurers_generous_quest_rewards }
        owner = {
            add_opinion = {
                who = FROM
                modifier = infestation_crossed_border
            }
        }

        #CHANGEABLE - SPREAD TYPE: Tier makes Tier of the same at target (NOTE: THIS USUALLY SHOULD BE THE SAME AS id.10 above)
        if = {
            limit = {
                FROM = { has_province_modifier = aw_test_1 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_1
                duration = -1
            }
        }
        else_if = {
            limit = {
                FROM = { has_province_modifier = aw_test_2 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_2
                duration = -1
            }
        }
        else_if = {
            limit = {
                FROM = { has_province_modifier = aw_test_3 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_3
                duration = -1
            }
        }

    }

    # we already are granting generous rewards
    option = { 
        name = aw_basic.0.c
        ai_chance = { factor = 50 }
        trigger = {
            owner = { has_estate = estate_adventurers }
            owner = { has_estate_privilege = estate_adventurers_generous_quest_rewards }
        }

        custom_tooltip = aw_has_adventurer_generous_rewards
        owner = {
            add_opinion = {
                who = FROM
                modifier = infestation_crossed_border
            }
        }

        #CHANGEABLE - SPREAD TYPE: Tier makes Tier of the same at target (NOTE: THIS USUALLY SHOULD BE THE SAME AS id.10 above)
        if = {
            limit = {
                FROM = { has_province_modifier = aw_test_1 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_1
                duration = -1
            }
        }
        else_if = {
            limit = {
                FROM = { has_province_modifier = aw_test_2 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_2
                duration = -1
            }
        }
        else_if = {
            limit = {
                FROM = { has_province_modifier = aw_test_3 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_3
                duration = -1
            }
        }

    }
    # we are adventurers, deal with it ourselves!
    option = { 
        name = aw_basic.0.dd
        ai_chance = { factor = 50 }
        trigger = {
            owner = { has_adventurer_reform = yes }
        }

        owner = {
            add_opinion = {
                who = FROM
                modifier = infestation_crossed_border
            }
        }

        #CHANGEABLE - SPREAD TYPE: Tier makes Tier of the same at target (NOTE: THIS USUALLY SHOULD BE THE SAME AS id.10 above)
        if = {
            limit = {
                FROM = { has_province_modifier = aw_test_1 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_1
                duration = -1
            }
        }
        else_if = {
            limit = {
                FROM = { has_province_modifier = aw_test_2 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_2
                duration = -1
            }
        }
        else_if = {
            limit = {
                FROM = { has_province_modifier = aw_test_3 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_3
                duration = -1
            }
        }
    }

    after = {
        FROM = {    #cleanup event to remove the modifiers from the original province
            remove_province_modifier = aw_test_1
            remove_province_modifier = aw_test_2
            remove_province_modifier = aw_test_3
        }
    }
}

#13 - basic propagation
province_event = {
    id = aw_test.13
    title = aw_test.13.t
    desc = aw_test.13.d
    picture = COMET_SIGHTED_eventPicture
    goto = ROOT
    
    hidden = no
    is_triggered_only = yes
    
    trigger = {
        OR = {
            has_province_modifier = aw_test_1
            has_province_modifier = aw_test_2
            has_province_modifier = aw_test_3
        }
    }
    
    immediate = {
        hidden_effect = {

            #CHANGEABLE - MIGRATION TYPE -  Any province in entire country under criteria   
            owner = {
                random_province = {
                    limit = {
                        #Specific Conditions
                        is_city = yes
                        continent = europe
                        NOT = { has_province_modifier = aw_test_1 }
                        NOT = { has_province_modifier = aw_test_2 }
                        NOT = { has_province_modifier = aw_test_3 }
                        OR = {
                            has_terrain = city_terrain
                            development = 20
                        }
                    }
                    save_event_target_as = infestation_migration_target
                }
            }
        }
    }

    #If migration is within country
    option = {  
        name = aw_test.13.a
        ai_chance = { factor = 100 }
        goto = infestation_migration_target
        trigger = {
            event_target:infestation_migration_target = {
                owned_by = ROOT
            }
        }


        event_target:infestation_migration_target = {
            if = {
                limit = {
                    owned_by = ROOT
                }

                #CHANGEABLE - SPREAD TYPE: Tier propagates Tier of the same at target
                if = {
                    limit = {
                        FROM = { has_province_modifier = aw_test_1 }
                    }
                    add_permanent_province_modifier = { 
                        name = aw_test_1
                        duration = -1
                    }
                }
                else_if = {
                    limit = {
                        FROM = { has_province_modifier = aw_test_2 }
                    }
                    add_permanent_province_modifier = { 
                        name = aw_test_2
                        duration = -1
                    }
                }
                else_if = {
                    limit = {
                        FROM = { has_province_modifier = aw_test_3 }
                    }
                    add_permanent_province_modifier = { 
                        name = aw_test_3
                        duration = -1
                    }
                }
            }
        }
    }

    #If migration is sent to OTHER country
    option = {  
        name = aw_test.13.b
        ai_chance = { factor = 100 }
        goto = infestation_migration_target
        trigger = {
            event_target:infestation_migration_target = {
                NOT = { owned_by = ROOT }   #if the target isnt in your country, then send an event to them that notifies + adds it on their end
            }
        }

        event_target:infestation_migration_target = {
            province_event = {
                id = aw_test.14
                days = 14
                #random = 31
            }
        }
    }
}

#14 - propagation target notification
province_event = {
    id = aw_test.14
    title = aw_test.14.t
    desc = aw_test.14.d
    picture = COMET_SIGHTED_eventPicture
    goto = ROOT
    
    hidden = no
    is_triggered_only = yes
    
    option = {
        # deal with it ourselves
        name = aw_basic.0.a
        ai_chance = { 
            factor = 20 
            modifier = {
                factor = 0
                owner = { is_in_deficit = yes }
            }
        }
        trigger = {
            owner = { has_estate = estate_adventurers }
            owner = { NOT = { has_estate_privilege = estate_adventurers_generous_quest_rewards } }
        }

        owner = {
            add_opinion = {
                who = FROM
                modifier = infestation_crossed_border
            }
        }

        #CHANGEABLE - SPREAD TYPE: Tier makes Tier of the same at target (NOTE: THIS USUALLY SHOULD BE THE SAME AS id.10 above)
        if = {
            limit = {
                FROM = { has_province_modifier = aw_test_1 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_1
                duration = -1
            }
        }
        else_if = {
            limit = {
                FROM = { has_province_modifier = aw_test_2 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_2
                duration = -1
            }
        }
        else_if = {
            limit = {
                FROM = { has_province_modifier = aw_test_3 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_3
                duration = -1
            }
        }

    }

    option = {
        # grant adventurer's generous rewards to look after it
        name = aw_basic.0.b
        ai_chance = { 
            factor = 20 
            modifier = {
                factor = 0
                owner = { is_in_deficit = yes }
            }
        }
        trigger = {
            owner = { has_estate = estate_adventurers }
            owner = { NOT = { has_estate_privilege = estate_adventurers_generous_quest_rewards } }
        }

        owner = { set_estate_privilege = estate_adventurers_generous_quest_rewards }
        owner = {
            add_opinion = {
                who = FROM
                modifier = infestation_crossed_border
            }
        }

        #CHANGEABLE - SPREAD TYPE: Tier makes Tier of the same at target (NOTE: THIS USUALLY SHOULD BE THE SAME AS id.10 above)
        if = {
            limit = {
                FROM = { has_province_modifier = aw_test_1 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_1
                duration = -1
            }
        }
        else_if = {
            limit = {
                FROM = { has_province_modifier = aw_test_2 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_2
                duration = -1
            }
        }
        else_if = {
            limit = {
                FROM = { has_province_modifier = aw_test_3 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_3
                duration = -1
            }
        }

    }

    # we already are granting generous rewards
    option = { 
        name = aw_basic.0.c
        ai_chance = { factor = 50 }
        trigger = {
            owner = { has_estate = estate_adventurers }
            owner = { has_estate_privilege = estate_adventurers_generous_quest_rewards }
        }

        custom_tooltip = aw_has_adventurer_generous_rewards
        owner = {
            add_opinion = {
                who = FROM
                modifier = infestation_crossed_border
            }
        }

        #CHANGEABLE - SPREAD TYPE: Tier makes Tier of the same at target (NOTE: THIS USUALLY SHOULD BE THE SAME AS id.10 above)
        if = {
            limit = {
                FROM = { has_province_modifier = aw_test_1 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_1
                duration = -1
            }
        }
        else_if = {
            limit = {
                FROM = { has_province_modifier = aw_test_2 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_2
                duration = -1
            }
        }
        else_if = {
            limit = {
                FROM = { has_province_modifier = aw_test_3 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_3
                duration = -1
            }
        }

    }
    # we are adventurers, deal with it ourselves!
    option = { 
        name = aw_basic.0.dd
        ai_chance = { factor = 50 }
        trigger = {
            owner = { has_adventurer_reform = yes }
        }

        owner = {
            add_opinion = {
                who = FROM
                modifier = infestation_crossed_border
            }
        }

        #CHANGEABLE - SPREAD TYPE: Tier makes Tier of the same at target (NOTE: THIS USUALLY SHOULD BE THE SAME AS id.10 above)
        if = {
            limit = {
                FROM = { has_province_modifier = aw_test_1 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_1
                duration = -1
            }
        }
        else_if = {
            limit = {
                FROM = { has_province_modifier = aw_test_2 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_2
                duration = -1
            }
        }
        else_if = {
            limit = {
                FROM = { has_province_modifier = aw_test_3 }
            }
            add_permanent_province_modifier = { 
                name = aw_test_3
                duration = -1
            }
        }
    }

}

############## 20s - Removal/Tier Down ###################

#20 - natural removal
province_event = {
    id = aw_test.20
    title = aw_test.20.t
    desc = aw_test.20.d
    picture = COMET_SIGHTED_eventPicture
    goto = ROOT
    
    hidden = no
    is_triggered_only = yes
    
    trigger = {
        OR = {
            has_province_modifier = aw_test_1
            has_province_modifier = aw_test_2
            has_province_modifier = aw_test_3
        }
    }
    
    option = {
        # oh, thank goodness
        name = aw_test.101.a
        ai_chance = { factor = 100 }

        remove_province_modifier = aw_test_1
        remove_province_modifier = aw_test_2
        remove_province_modifier = aw_test_3

    }
}

#21 - adventurer removal
province_event = {
    id = aw_test.21
    title = aw_test.21.t
    desc = aw_test.21.d
    picture = COMET_SIGHTED_eventPicture
    goto = ROOT
    
    hidden = no
    is_triggered_only = yes
    
    trigger = {
        owner = { has_estate = estate_adventurers }
        OR = {
            has_province_modifier = aw_test_1
            has_province_modifier = aw_test_2
            has_province_modifier = aw_test_3
        }
    }
    
    option = {
        # oh, thank goodness
        name = aw_test.21.a
        ai_chance = { factor = 100 }

        remove_province_modifier = aw_test_1
        remove_province_modifier = aw_test_2
        remove_province_modifier = aw_test_3

        owner = {
            add_estate_influence_modifier = {
                estate = estate_adventurers
                desc = successful_adventure
                duration = 3650
                influence = 5
            }
        }

    }
}

#22 - natural tier down
province_event = {
    id = aw_test.22
    title = aw_test.22.t
    desc = aw_test.22.d
    picture = COMET_SIGHTED_eventPicture
    goto = ROOT
    
    hidden = no
    is_triggered_only = yes
    
    trigger = {
        OR = { 
            has_province_modifier = aw_test_1 
            has_province_modifier = aw_test_2
            has_province_modifier = aw_test_3
        }
    }
    option = {
        name = aw_test.22.a
        ai_chance = { factor = 100 }
        if = {
            limit = { 
                has_province_modifier = aw_test_3 
            }
            remove_province_modifier = aw_test_3
            add_permanent_province_modifier  = {
                name = aw_test_2
                duration = -1  
            }
        }
        else_if = {
            limit = { 
                has_province_modifier = aw_test_2
            }
            remove_province_modifier = aw_test_2
            add_permanent_province_modifier  = {
                name = aw_test_1
                duration = -1  
            }
        }
        else_if = {
            limit = { 
                has_province_modifier = aw_test_1
            }
            add_permanent_province_modifier  = {
                name = aw_test_1
                duration = -1  
            }
        }
    }
}

#23 - adventurer tier down
province_event = {
    id = aw_test.23
    title = aw_test.23.t
    desc = aw_test.23.d
    picture = COMET_SIGHTED_eventPicture
    goto = ROOT
    
    hidden = no
    is_triggered_only = yes
    
    trigger = {
        owner = { has_estate = estate_adventurers }
        OR = { 
            has_province_modifier = aw_test_1 
            has_province_modifier = aw_test_2
            has_province_modifier = aw_test_3
        }
    }
    option = {
        name = aw_test.22.a
        ai_chance = { factor = 100 }
        if = {
            limit = { 
                has_province_modifier = aw_test_3 
            }
            remove_province_modifier = aw_test_3
            add_permanent_province_modifier  = {
                name = aw_test_2
                duration = -1  
            }
        }
        else_if = {
            limit = { 
                has_province_modifier = aw_test_2
            }
            remove_province_modifier = aw_test_2
            add_permanent_province_modifier  = {
                name = aw_test_1
                duration = -1  
            }
        }
        else_if = {
            limit = { 
                has_province_modifier = aw_test_1
            }
            add_permanent_province_modifier  = {
                name = aw_test_1
                duration = -1  
            }
        }

        owner = {
            add_estate_influence_modifier = {
                estate = estate_adventurers
                desc = successful_adventure
                duration = 3650
                influence = 5
            }
        }
    }
}

############## 30s - Tier Up ###################

#30 - natural tier up
province_event = {
    id = aw_test.30
    title = aw_test.30.t
    desc = aw_test.30.d
    picture = COMET_SIGHTED_eventPicture
    goto = ROOT
    
    hidden = no
    is_triggered_only = yes
    
    trigger = {
        OR = { 
            has_province_modifier = aw_test_1 
            has_province_modifier = aw_test_2
            has_province_modifier = aw_test_3
        }
    }
    option = {
        name = aw_test.30.a
        ai_chance = { factor = 100 }
        if = {
            limit = { 
                has_province_modifier = aw_test_1
            }
            remove_province_modifier = aw_test_1
            add_permanent_province_modifier  = {
                name = aw_test_2
                duration = -1  
            }
        }
        else_if = {
            limit = { 
                has_province_modifier = aw_test_2
            }
            remove_province_modifier = aw_test_2
            add_permanent_province_modifier  = {
                name = aw_test_3
                duration = -1  
            }
        }
        else_if = {
            limit = { 
                has_province_modifier = aw_test_3
            }

        }
    }
}

############## 110s - Special Migration ###################



############## 120s - Special Removal/Tier Down ###################



############## 130s - Special Tier Up ###################





############## 200s - Special Flavour ###################